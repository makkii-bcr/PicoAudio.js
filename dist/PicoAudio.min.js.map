{"version":3,"file":"PicoAudio.min.js","sources":["../src/init/constructor.js","../src/util/random-util.js","../src/util/interpolation-util.js","../src/init/init.js","../src/util/ponyfill.js","../src/player/set-data.js","../src/player/init-status.js","../src/util/array-util.js","../src/util/parse-util.js","../src/player/play/update-note.js","../src/player/play.js","../src/player/stop.js","../src/player/sound-source/create-base-note.js","../src/player/sound-source/create-note.js","../src/player/sound-source/create-percussion-note.js","../src/player/stop-manager/stop-audio-node.js","../src/player/stop-manager/push-func.js","../src/player/stop-manager/clear-func.js","../src/player/time/get-time.js","../src/player/time/get-timing.js","../src/smf/parse-smf/parse-header.js","../src/smf/parse-smf/parse-track.js","../src/smf/parse-smf/parse-event.js","../src/smf/parse-smf.js","../src/web-midi/start-web-midi.js","../src/main.js"],"sourcesContent":["/*\r\nargsObj {\r\n    debug,\r\n    audioContext,\r\n    picoAudio,\r\n    etc (this.settings.xxx)\r\n}\r\n*/\r\nexport default function picoAudioConstructor(argsObj) {\r\n    this.debug = false;\r\n    this.isStarted = false;\r\n    this.isPlayed = false;\r\n    this.settings = {\r\n        masterVolume: 1,\r\n        generateVolume: 0.15,\r\n        tempo: 120,\r\n        basePitch: 440,\r\n        resolution: 480,\r\n        isWebMIDI: false,\r\n        WebMIDIPortOutputs: null,\r\n        WebMIDIPortOutput: null,\r\n        WebMIDIPort: -1, // -1:auto\r\n        WebMIDIPortSysEx: true, // MIDIデバイスのフルコントロールをするかどうか（SysExを使うかどうか）(httpsじゃないと使えない)\r\n        isReverb: true, // リバーブONにするか\r\n        reverbVolume: 1.5,\r\n        initReverb: 10,\r\n        isChorus: true,\r\n        chorusVolume: 0.5,\r\n        isCC111: true,\r\n        loop: false,\r\n        isSkipBeginning: false, // 冒頭の余白をスキップ\r\n        isSkipEnding: true, // 末尾の空白をスキップ\r\n        holdOnValue: 64,\r\n        maxPoly: -1, // 同時発音数 -1:infinity\r\n        maxPercPoly: -1, // 同時発音数(パーカッション) -1:infinity\r\n        isOfflineRendering: false, // TODO 演奏データを作成してから演奏する\r\n        isSameDrumSoundOverlap: false // 同じドラムの音が重なることを許容するか\r\n    };\r\n\r\n    // argsObjで設定値が指定されていたら上書きする\r\n    rewriteVar(this, argsObj, \"debug\");\r\n    for (let key in this.settings) {\r\n        rewriteVar(this.settings, argsObj, key);\r\n    }\r\n\r\n    this.events = [];\r\n    this.trigger = {\r\n        isNoteTrigger: true,\r\n        play: ()=>{},\r\n        stop: ()=>{},\r\n        noteOn: ()=>{},\r\n        noteOff: ()=>{},\r\n        songEnd: ()=>{}\r\n    };\r\n    this.states = {\r\n        isPlaying: false,\r\n        startTime: 0,\r\n        stopTime: 0,\r\n        stopFuncs: [],\r\n        webMIDIWaitState: null,\r\n        webMIDIStopTime: 0,\r\n        playIndices: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        updateBufTime: 100,\r\n        updateBufMaxTime: 350,\r\n        updateIntervalTime: 0,\r\n        latencyLimitTime: 0\r\n    };\r\n    this.hashedDataList = [];\r\n    this.hashedMessageList = [];\r\n    this.playData = null;\r\n    this.channels = [];\r\n    this.tempoTrack = [\r\n        { timing: 0, value: 120 },\r\n        { timing: 0, value: 120 }\r\n    ];\r\n    this.cc111Time = -1;\r\n    this.onSongEndListener = null;\r\n\r\n    // チャンネルの設定値（音色, 減衰, 音量） //\r\n    for (let i=0; i<17; i++) {\r\n        this.channels.push([0, 0, 1]);\r\n    }\r\n\r\n    // AudioContextがある場合はそのまま初期化、なければAudioContextを用いる初期化をinit()で\r\n    if (argsObj && argsObj.audioContext) {\r\n        this.init(argsObj);\r\n    }\r\n}\r\n\r\nfunction rewriteVar(dist, src, hensu) {\r\n    if (src && src[hensu] != null && dist && dist[hensu] != null) {\r\n        dist[hensu] = src[hensu];\r\n    }\r\n}","/**\r\n * 固定パターンの乱数を提供するクラス\r\n */\r\nexport default class RandomUtil {\r\n    /**\r\n     * 乱数のシード値をリセットする\r\n     */\r\n    static resetSeed() {\r\n        this.init = true;\r\n        this.x = 123456789;\r\n        this.y = 362436069;\r\n        this.z = 521288629;\r\n        this.w = 8867512;\r\n    }\r\n\r\n    /**\r\n     * 乱数を返す\r\n     * \r\n     *     Math.random() と違い、毎回固定パターンで乱数が返される\r\n     * Xorshiftアルゴリズム\r\n     * @returns {number} 乱数\r\n     */\r\n    static random() {\r\n        if (!this.init) this.resetSeed();\r\n        const t = this.x ^ (this.x << 11);\r\n        this.x = this.y; this.y = this.z; this.z = this.w;\r\n        let r = this.w = (this.w ^ (this.w >>> 19)) ^ (t ^ (t >>> 8));\r\n        r = Math.abs(r) / 2147483648 % 2;\r\n        return r;\r\n    }\r\n}","/**\r\n * 補間を提供するクラス\r\n */\r\nexport default class InterpolationUtil {\r\n    /**\r\n     * 波形を線形補間する\r\n     * @param {AudioBuffer} buffer 補間結果を入れるAudioBuffer\r\n     * @param {Array} vtBufs 仮想音源の配列([Float32Array, Float32Array])\r\n     */\r\n    static lerpWave(buffer, vtBufs) {\r\n        // 仮想サンプルレート音源を本番音源に変換する //\r\n        const bufferSize = buffer.getChannelData(0).length;\r\n        const vtBufsSize = vtBufs[0].length;\r\n        if (bufferSize == vtBufsSize) { // 線形補間の必要なし //\r\n            for (let ch=0; ch<2; ch++) {\r\n                const data = buffer.getChannelData(ch);\r\n                const vtBuf = vtBufs[ch];\r\n                for (let i=0; i<bufferSize; i++) {\r\n                    data[i] = vtBuf[i];\r\n                }\r\n            }\r\n        } else { // 線形補間 //\r\n            const ratio = vtBufsSize / bufferSize;\r\n            for (let ch=0; ch<2; ch++) {\r\n                const data = buffer.getChannelData(ch);\r\n                const vtBuf = vtBufs[ch];\r\n                for (let i=0; i<bufferSize; i++) {\r\n                    // 線形補間しながら波形を作成 //\r\n                    // TODO 音がまだ少し違和感あるので、スプライン補正に変更した方がいいかも //\r\n                    const idxF = i * ratio;\r\n                    const idx1 = Math.trunc(idxF);\r\n                    const idx2 = (idx1 + 1) % vtBufsSize;\r\n                    const idxR = idxF - idx1;\r\n                    const w = vtBuf[idx1] * (1 - idxR) + vtBuf[idx2] * idxR;\r\n                    data[i] = w;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import RandomUtil from '../util/random-util.js';\r\nimport InterpolationUtil from '../util/interpolation-util.js';\r\n\r\nexport default function init(argsObj) {\r\n    if (this.isStarted) return;\r\n    this.isStarted = true;\r\n\r\n    const audioContext = argsObj && argsObj.audioContext;\r\n    const picoAudio = argsObj && argsObj.picoAudio;\r\n\r\n    // AudioContextを生成 //\r\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    this.context = audioContext ? audioContext : new AudioContext();\r\n\r\n    // マスターボリューム //\r\n    // リアルタイムで音量変更するためにdestination前にgainNodeを一つ噛ませる\r\n    this.masterGainNode = this.context.createGain();\r\n    this.masterGainNode.gain.value = this.settings.masterVolume;\r\n\r\n    // 仮想サンプルレート //\r\n    const sampleRate = this.context.sampleRate;\r\n    const sampleRateVT = sampleRate >= 48000 ? 48000 : sampleRate;\r\n\r\n    // ホワイトノイズ //\r\n    if (picoAudio && picoAudio.whitenoise) { // 使いまわし\r\n        this.whitenoise = picoAudio.whitenoise;\r\n    } else {\r\n        RandomUtil.resetSeed(); // 乱数パターンを固定にする（Math.random()を使わない）\r\n        // 再生環境のサンプルレートによって音が変わってしまうので //\r\n        // 一旦仮想サンプルレートで音源を作成する //\r\n        const seLength = 1;\r\n        const sampleLength = sampleRate * seLength;\r\n        const sampleLengthVT = sampleRateVT * seLength;\r\n        const vtBufs = [];\r\n        for (let ch=0; ch<2; ch++) {\r\n            vtBufs.push(new Float32Array(sampleLengthVT));\r\n            const vtBuf = vtBufs[ch];\r\n            for (let i=0; i<sampleLengthVT; i++) {\r\n                const r = RandomUtil.random();\r\n                vtBuf[i] = r * 2 - 1;\r\n            }\r\n        }\r\n        // 仮想サンプルレート音源を本番音源に変換する //\r\n        this.whitenoise = this.context.createBuffer(2, sampleLength, sampleRate);\r\n        InterpolationUtil.lerpWave(this.whitenoise, vtBufs);\r\n    }\r\n\r\n    // リバーブ用のインパルス応答音声データ作成（てきとう） //\r\n    if (picoAudio && picoAudio.impulseResponse) { // 使いまわし\r\n        this.impulseResponse = picoAudio.impulseResponse;\r\n    } else {\r\n        RandomUtil.resetSeed(); // 乱数パターンを固定にする（Math.random()を使わない）\r\n        // 再生環境のサンプルレートによって音が変わってしまうので //\r\n        // 一旦仮想サンプルレートで音源を作成する //\r\n        const seLength = 3.5;\r\n        const sampleLength = sampleRate * seLength;\r\n        const sampleLengthVT = sampleRateVT * seLength;\r\n        const vtBufs = [];\r\n        for (let ch=0; ch<2; ch++) {\r\n            vtBufs.push(new Float32Array(sampleLengthVT));\r\n            const vtBuf = vtBufs[ch];\r\n            for (let i=0; i<sampleLengthVT; i++) {\r\n                const v = ((sampleLengthVT - i) / sampleLengthVT);\r\n                const s = i / sampleRateVT;\r\n                const d = (s < 0.030 ? 0 : v)\r\n                    * (s >= 0.030 && s < 0.031 ? v*2 : v)\r\n                    * (s >= 0.040 && s < 0.042 ? v*1.5 : v)\r\n                    * (s >= 0.050 && s < 0.054 ? v*1.25 : v)\r\n                    * RandomUtil.random() * 0.2 * Math.pow((v-0.030), 4);\r\n                vtBuf[i] = d;\r\n            }\r\n        }\r\n        // 仮想サンプルレート音源を本番音源に変換する //\r\n        this.impulseResponse = this.context.createBuffer(2, sampleLength, this.context.sampleRate);\r\n        InterpolationUtil.lerpWave(this.impulseResponse, vtBufs);\r\n    }\r\n\r\n    // リバーブ用のAudioNode作成・接続 //\r\n    this.convolver = this.context.createConvolver();\r\n    this.convolver.buffer = this.impulseResponse;\r\n    this.convolver.normalize = true;\r\n    this.convolverGainNode = this.context.createGain();\r\n    this.convolverGainNode.gain.value = this.settings.reverbVolume;\r\n    this.convolver.connect(this.convolverGainNode);\r\n    this.convolverGainNode.connect(this.masterGainNode);\r\n    this.masterGainNode.connect(this.context.destination);\r\n\r\n    // コーラス用のAudioNode作成・接続 //\r\n    this.chorusDelayNode = this.context.createDelay();\r\n    this.chorusGainNode = this.context.createGain();\r\n    this.chorusOscillator = this.context.createOscillator();\r\n    this.chorusLfoGainNode = this.context.createGain();\r\n    this.chorusDelayNode.delayTime.value = 0.025;\r\n    this.chorusLfoGainNode.gain.value = 0.010;\r\n    this.chorusOscillator.frequency.value = 0.05;\r\n    this.chorusGainNode.gain.value = this.settings.chorusVolume;\r\n    this.chorusOscillator.connect(this.chorusLfoGainNode);\r\n    this.chorusLfoGainNode.connect(this.chorusDelayNode.delayTime);\r\n    this.chorusDelayNode.connect(this.chorusGainNode);\r\n    this.chorusGainNode.connect(this.masterGainNode);\r\n    this.masterGainNode.connect(this.context.destination);\r\n    this.chorusOscillator.start(0);\r\n}","\r\nexport class Performance {\r\n    static now() {\r\n        // Unsupport performance.now()\r\n        if (this._now == null) {\r\n            if (typeof window.performance === \"undefined\") {\r\n                this._now = () => { return window.Date.now(); };\r\n            } else {\r\n                this._now = () => { return window.performance.now(); };\r\n            }\r\n        }\r\n        return this._now();\r\n    }\r\n}\r\n\r\nexport class Number {\r\n    static MAX_SAFE_INTEGER() { return 0x1FFFFFFFFFFFFF; }\r\n}","import {Performance} from '../util/ponyfill.js';\r\n\r\nexport default function setData(data) {\r\n    if (this.debug) {\r\n        var syoriTimeS = Performance.now();\r\n    }\r\n\r\n    if (this.states.isPlaying) this.stop();\r\n\r\n    this.playData = data;\r\n    this.settings.resolution = data.header.resolution;\r\n    this.settings.tempo = data.tempo || 120;\r\n    this.tempoTrack = data.tempoTrack;\r\n    this.cc111Time = data.cc111Time;\r\n    this.firstNoteOnTiming = data.firstNoteOnTiming;\r\n    this.lastNoteOffTiming = data.lastNoteOffTiming;\r\n    this.firstNoteOnTime = data.firstNoteOnTime;\r\n    this.lastNoteOffTime = data.lastNoteOffTime;\r\n    this.initStatus();\r\n\r\n    if (this.debug) {\r\n        const syoriTimeE = Performance.now();\r\n        console.log(\"setData time\", syoriTimeE - syoriTimeS);\r\n    }\r\n\r\n    return this;\r\n}","export default function initStatus(isSongLooping, isLight) {\r\n    // WebMIDI使用中の場合、initStatus()連打の対策 //\r\n    if (this.settings.isWebMIDI) { \r\n        if (this.states.webMIDIWaitState != null) return;\r\n    }\r\n\r\n    // 演奏中の場合、停止する //\r\n    this.stop(isSongLooping);\r\n\r\n    // statesを初期化 //\r\n    this.states = {\r\n        isPlaying: false,\r\n        startTime: 0,\r\n        stopTime: 0,\r\n        stopFuncs: [],\r\n        webMIDIWaitState: null,\r\n        webMIDIStopTime: this.states.webMIDIStopTime,\r\n        playIndices: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        updateBufTime: this.states.updateBufTime,\r\n        updateBufMaxTime: this.states.updateBufMaxTime,\r\n        updateIntervalTime: this.states.updateIntervalTime,\r\n        latencyLimitTime: this.states.latencyLimitTime,\r\n        noteOnAry: [],\r\n        noteOffAry: []\r\n    };\r\n\r\n    // WebMIDIの初期化・リセットメッセージ送信 //\r\n    if (this.settings.isWebMIDI && !isLight) {\r\n        if (isSongLooping)\r\n            return;\r\n        if (this.settings.WebMIDIPortOutput == null) {\r\n            this.startWebMIDI();\r\n            return;\r\n        }\r\n        if (this.settings.WebMIDIPortSysEx) {\r\n            // GM1システム・オン\r\n            this.settings.WebMIDIPortOutput.send([0xF0, 0x7E, 0x7F, 0x09, 0x01, 0xF7]);\r\n        } else {\r\n            // SysExの使用が拒否されているので、できる限り設定値を初期値に戻す\r\n            for (let t=0; t<16; t++) {\r\n                this.settings.WebMIDIPortOutput.send([0xC0+t, 0]);\r\n                this.settings.WebMIDIPortOutput.send([0xE0+t, 0, 64]);\r\n                // ピッチあたりのずれがひどくなる場合がある よくわからない\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 100, 0]);\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 101, 0]);\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 6, 2]); //pitchbend\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 100, 1]);\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 96, 0]);\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 97, 64]); //tuning?\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 7, 100]); // volume\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 10, 64]); // pan\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 11, 127]); // expression\r\n                //this.settings.WebMIDIPortOutput.send([0xB0+t, 91, 40]); // リバーブ以外のエフェクトに設定される場合がありそうなのでコメントアウト\r\n                //this.settings.WebMIDIPortOutput.send([0xB0+t, 93, 0]); // コーラス以外のエフェクトに設定されるのか音が出なくなる場合があるのでコメントアウト\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 98, 0]);\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 99, 0]);\r\n                //this.settings.WebMIDIPortOutput.send([0xB0+t, 121, 0]);\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 122, 0]);\r\n            }\r\n        }\r\n    }\r\n}","export default class ArrayUtil extends Array {\r\n    /**\r\n     * 配列から要素１つを削除する\r\n     * \r\n     *     Array.splice(index, 1); を高速化する\r\n     *     特に配列末尾、又は配列先頭を削除するときに高速処理が期待できる\r\n     * @param {Array} array 配列\r\n     * @param {number} index 添え字\r\n     */\r\n    static delete(array, index) {\r\n        if (index == array.length-1) array.pop(); // 配列末尾をArray.pop()で削除すると高速化する\r\n        else if (index == 0) array.shift(); // 配列先頭をArray.shift()で削除すると高速化する（あまり変わらない環境もある）\r\n        else array.splice(index, 1); // 配列先頭・末尾以外を削除する場合はArray.splice()で削除する\r\n    }\r\n}","export default class ParseUtil {\r\n    /**\r\n     * バイト配列内に含まれる\"データ長\"を数値に変換する\r\n     * @param {Uint8Array} arr バイト配列\r\n     * @param {number} startIdx データ長の始点の場所(index)\r\n     * @param {number} endIdx データ長の終点の場所(index) - 1\r\n     * @returns {number} データ長\r\n     */\r\n    static getInt(arr, startIdx, endIdx) {\r\n        let value = 0;\r\n        for (let i=startIdx; i<endIdx; i++) {\r\n            value = (value << 8) + arr[i];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * バイト配列内に含まれる\"可変長のデータ長\"を数値に変換する\r\n     * @param {Uint8Array} arr バイト配列\r\n     * @param {number} startIdx データ長の始点の場所(index)\r\n     * @param {number} endIdx データ長の終点の場所(index) - 1 (終点の場所は多くてもかまわない)\r\n     * @returns {Array} [データ長, \"可変長のデータ長\"のバイト数]\r\n     */\r\n    static variableLengthToInt(arr, startIdx, endIdx) {\r\n        let i = startIdx;\r\n        let value = 0;\r\n        while (i < endIdx-1 && arr[i] >= 0x80) {\r\n            if (i < startIdx+4) value = (value<<7) + (arr[i]-0x80);\r\n            i++;\r\n        }\r\n        value = (value<<7) + arr[i];\r\n        i++;\r\n        return [value, i-startIdx];\r\n    }\r\n\r\n    /**\r\n     * デルタタイムの順番になるように配列に挿入\r\n     * @param {PicoAudio} that PicoAudioインスタンス\r\n     * @param {number} ch チャンネル番号\r\n     * @param {number} time デルタタイム\r\n     * @param {number} p 対象のMIDIイベントの場所(SMFデータ内の位置)\r\n     * @param {number} len MIDIイベントの長さ\r\n     */\r\n    static chIndicesInsert(that, ch, time, p, len) {\r\n        const indices = ch.indices;\r\n\r\n        // デルタタイムの順番になるようにリスト配列に挿入 //\r\n        if (ch.indicesLength >= 4 && time < indices[ch.indicesFoot]) {\r\n            // Insert //\r\n            while (ch.indicesCur != -1) {\r\n                if (time<indices[ch.indicesCur]) {\r\n                    if (ch.indicesCur == ch.indicesHead) {\r\n                        ch.indicesHead = ch.indicesLength;\r\n                    } else {\r\n                        indices[ch.indicesPre+3] = ch.indicesLength;\r\n                    }\r\n                    indices[ch.indicesLength] = time;\r\n                    indices[ch.indicesLength+1] = len;\r\n                    indices[ch.indicesLength+2] = p;\r\n                    indices[ch.indicesLength+3] = ch.indicesCur;\r\n                    ch.indicesPre = ch.indicesLength;\r\n                    ch.indicesLength += 4;\r\n                    break;\r\n                }\r\n                ch.indicesPre = ch.indicesCur;\r\n                ch.indicesCur = indices[ch.indicesCur+3];\r\n            }\r\n        } else {\r\n            // Push //\r\n            if (ch.indicesLength >= 4) {\r\n                indices[ch.indicesFoot+3] = ch.indicesLength;\r\n            } else {\r\n                ch.indicesHead = 0;\r\n            }\r\n            ch.indicesFoot = ch.indicesLength;\r\n            indices[ch.indicesLength] = time;\r\n            indices[ch.indicesLength+1] = len;\r\n            indices[ch.indicesLength+2] = p;\r\n            indices[ch.indicesLength+3] = -1;\r\n            ch.indicesLength += 4;\r\n        }\r\n    }\r\n}","import ArrayUtil from '../../util/array-util.js';\r\nimport ParseUtil from '../../util/parse-util.js';\r\nimport {Performance} from '../../util/ponyfill.js';\r\n\r\nexport default class UpdateNote {\r\n    /**\r\n     * 1ms毎処理用の変数を初期化\r\n     */\r\n    static init(picoAudio, currentTime) {\r\n        this.updatePreTime = Performance.now();\r\n        this.pPreTime = Performance.now();\r\n        this.cPreTime = picoAudio.context.currentTime * 1000;\r\n        this.pTimeSum = 0;\r\n        this.cTimeSum = 0;\r\n        this.cnt = 0;\r\n        this.initCurrentTime = currentTime;\r\n    }\r\n\r\n    /**\r\n     * 再生中、1ms毎に呼ばれるコールバック\r\n     * （ブラウザの制限で実際は最短4ms毎に呼ばれる）\r\n     * @returns {number} 現在の時間\r\n     */\r\n    static update(picoAudio) {\r\n        const context = picoAudio.context;\r\n        const settings = picoAudio.settings;\r\n        const states = picoAudio.states;\r\n        const updateNowTime = Performance.now();\r\n        const updatePreTime = this.updatePreTime;\r\n        let pPreTime = this.pPreTime;\r\n        let cPreTime = this.cPreTime;\r\n        let pTimeSum = this.pTimeSum;\r\n        let cTimeSum = this.cTimeSum;\r\n        let cnt = this.cnt;\r\n\r\n        // サウンドが重くないか監視（フリーズ対策） //\r\n        //   performance.now()とAudioContext.currentTimeの時間差を計算し\r\n        //   AudioContext.currentTimeが遅れていたら処理落ちしていると判断する\r\n        let updateBufTime = updateNowTime - updatePreTime;\r\n        const pTime = updateNowTime;\r\n        const cTime = context.currentTime * 1000;\r\n        pTimeSum += pTime - pPreTime;\r\n        cTimeSum += cTime - cPreTime;\r\n        pPreTime = pTime;\r\n        cPreTime = cTime;\r\n        const latencyTime = pTimeSum - cTimeSum;\r\n        states.latencyTime = latencyTime;\r\n\r\n        // サウンドが重い場合、負荷軽減処理を発動するリミットを上げていく //\r\n        if (latencyTime >= 100) { // currentTimeが遅い（サウンドが重い）\r\n            states.latencyLimitTime += latencyTime;\r\n            cTimeSum += 100;\r\n        } else if (latencyTime <= -100) { // currentTimeが速い（誤差）\r\n            cTimeSum = pTimeSum;\r\n        } else {\r\n            if (states.latencyLimitTime > 0) { // currentTimeが丁度いい\r\n                states.latencyLimitTime -= updateBufTime*0.003;\r\n                if (states.latencyLimitTime < 0) states.latencyLimitTime = 0;\r\n            }\r\n        }\r\n\r\n        // ノートを先読み度合いを自動調整（予約しすぎると重くなる） //\r\n        states.updateIntervalTime = updateBufTime;\r\n        if (states.updateBufTime < updateBufTime) { // 先読み遅れている場合\r\n            states.updateBufTime = updateBufTime;\r\n        } else { // 先読み量に余裕がある場合\r\n            // 先読み量を少しずつ減らす //\r\n            if (states.updateBufMaxTime > 350) {\r\n                states.updateBufMaxTime -= states.updateBufMaxTime*0.002;\r\n            }\r\n            // 先読み量を少しずつ増やす //\r\n            if (states.updateBufTime < 20) {\r\n                states.updateBufTime += states.updateBufTime*0.0005;\r\n            }\r\n            if (states.updateBufMaxTime >= 10 && states.updateBufMaxTime < 340) {\r\n                states.updateBufMaxTime += states.updateBufMaxTime*0.002;\r\n            }\r\n        }\r\n        // 先読み量が足りなくなった場合\r\n        if (states.updateBufTime > states.updateBufMaxTime) {\r\n            if (updateBufTime >= 900 && states.latencyLimitTime <= 150) {\r\n                // バックグラウンドっぽくて重くない場合、バックグラウンド再生\r\n                states.updateBufMaxTime += updateBufTime;\r\n            } else { // 通常\r\n                const tempTime = updateBufTime - states.updateBufMaxTime;\r\n                states.updateBufTime = states.updateBufMaxTime;\r\n                \r\n                // 先読み量が小さい場合大きくする\r\n                if (states.updateBufMaxTime < 10) {\r\n                    states.updateBufTime = states.updateBufMaxTime;\r\n                    states.updateBufMaxTime *= 1.25;\r\n                } else {\r\n                    states.updateBufMaxTime += tempTime / 2;\r\n                }\r\n            }\r\n            if (states.updateBufMaxTime > 1100) states.updateBufMaxTime = 1100;\r\n        }\r\n\r\n        // サウンドが重すぎる場合、先読み度合いを小さくして負荷軽減 //\r\n        if (states.latencyLimitTime > 150) {\r\n            cTimeSum = pTimeSum;\r\n            states.latencyLimitTime -= 5;\r\n            if (states.latencyLimitTime > 1000) states.latencyLimitTime = 1000;\r\n            // ノート先読みをかなり小さくする（フリーズ対策）\r\n            states.updateBufMaxTime = 1;\r\n            states.updateBufTime = 1;\r\n            updateBufTime = 1;\r\n        }\r\n\r\n        // 再生処理 //\r\n        for (let ch=0; ch<16; ch++) {\r\n            const notes = picoAudio.playData.channels[ch].notes;\r\n            let idx = states.playIndices[ch];\r\n            for (; idx<notes.length; idx++) {\r\n                const note = notes[idx];\r\n                const curTime = cnt == 0 ? this.initCurrentTime - states.startTime\r\n                    : context.currentTime - states.startTime;\r\n\r\n                // 終わったノートは演奏せずにスキップ\r\n                if (curTime >= note.stopTime) continue;\r\n                // （シークバーで途中から再生時）startTimeが過ぎたものは鳴らさない\r\n                if (cnt == 0 && curTime > note.startTime+0.05) continue;\r\n                // AudioParam.setValueAtTime()等でマイナスが入るとエラーになるので対策\r\n                if (curTime + note.startTime < 0) continue;\r\n                // 演奏開始時間 - 先読み時間(ノート予約) になると演奏予約or演奏開始\r\n                if (curTime < note.startTime - states.updateBufTime/1000) break;\r\n\r\n                // PicoAudio音源の再生処理 //\r\n                if (!settings.isWebMIDI) { \r\n                    // 予約ノート数が急激に増えそうな時、先読み量を小さくしておく //\r\n                    if (states.stopFuncs.length >= 350 && states.updateBufTime < 1000) {\r\n                        states.updateBufTime = 12;\r\n                        states.updateBufMaxTime = states.updateBufTime;\r\n                    }\r\n\r\n                    // レトロモード（和音制限モード） //\r\n                    if (settings.maxPoly != -1 || settings.maxPercPoly != -1) {\r\n                        let polyCnt = 0;\r\n                        let percCnt = 0;\r\n                        states.stopFuncs.forEach((tar) => {\r\n                            if (!tar.note) return;\r\n                            if (tar.note.channel != 9) {\r\n                                if (note.start >= tar.note.start && note.start < tar.note.stop) {\r\n                                    polyCnt++;\r\n                                }\r\n                            } else {\r\n                                if (note.start == tar.note.start) {\r\n                                    percCnt++;\r\n                                }\r\n                            }\r\n                        });\r\n                        if ((note.channel != 9 && polyCnt >= settings.maxPoly)\r\n                            || (note.channel == 9 && percCnt >= settings.maxPercPoly)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    // １ノート分の再生処理（WebAudioで再生） //\r\n                    const stopFunc =\r\n                        note.channel != 9 ? picoAudio.createNote(note)\r\n                        : picoAudio.createPercussionNote(note);\r\n                    if (!stopFunc) continue; // 無音の場合、処理しない\r\n                    picoAudio.pushFunc({\r\n                        note: note,\r\n                        stopFunc: stopFunc\r\n                    });\r\n                }\r\n                states.noteOnAry.push(note);\r\n            }\r\n            // notesのどこまで再生したかを記憶して、次回コールバック時にそこから処理を始める\r\n            states.playIndices[ch] = idx;\r\n        }\r\n\r\n        // noteOnの時間になったか監視 //\r\n        this.checkNoteOn(picoAudio);\r\n\r\n        // noteOffの時間になったか監視 //\r\n        this.checkNoteOff(picoAudio);\r\n\r\n        // WebMIDIの再生処理 //\r\n        if (settings.isWebMIDI && settings.WebMIDIPortOutput != null) {\r\n            const messages = picoAudio.playData.messages;\r\n            const smfData = picoAudio.playData.smfData;\r\n            let idx = states.playIndices[16]; // 17chはWebMIDI用\r\n            for (; idx<messages.length; idx++) {\r\n                const message = messages[idx];\r\n                const curTime = context.currentTime - states.startTime;\r\n\r\n                // 終わったノートは演奏せずにスキップ\r\n                if (curTime > message.time + 1) continue;\r\n                // 演奏開始時間 - 先読み時間(ノート予約) になると演奏予約or演奏開始\r\n                if (curTime < message.time - 1) break;\r\n\r\n                // WebMIDIでMIDIメッセージを送信する処理 //\r\n                const pLen = message.smfPtrLen;\r\n                const p = message.smfPtr;\r\n                const time = message.time;\r\n                const state = smfData[p];\r\n                if (state!=0xff) {\r\n                    try {\r\n                        if (state==0xF0 || state==0xF7) {\r\n                            // sysExのMIDIメッセージ\r\n                            if (settings.WebMIDIPortSysEx) {\r\n                                // 長さ情報を取り除いて純粋なSysExメッセージにする\r\n                                const lengthAry = ParseUtil.variableLengthToInt(smfData, p+1, p+1+4);\r\n                                const sysExStartP = p+1+lengthAry[1];\r\n                                const sysExEndP = sysExStartP+lengthAry[0];\r\n                                const webMIDIMes = new Uint8Array(1 + lengthAry[0]);\r\n                                webMIDIMes[0] = state;\r\n                                const size = sysExEndP - sysExStartP;\r\n                                for (let i=0; i<size; i++)\r\n                                    webMIDIMes[i+1] = smfData[sysExStartP + i];\r\n                                settings.WebMIDIPortOutput.send(webMIDIMes,\r\n                                    (time - context.currentTime + Performance.now()/1000 + states.startTime) * 1000);\r\n                            }\r\n                        } else {\r\n                            // sysEx以外のMIDIメッセージ\r\n                            const sendMes = [];\r\n                            for (let i=0; i<pLen; i++) sendMes.push(smfData[p+i]);\r\n                            settings.WebMIDIPortOutput.send(sendMes,\r\n                                (time - context.currentTime + Performance.now()/1000 + states.startTime) * 1000);\r\n                        }\r\n                    } catch(e) {\r\n                        console.log(e, p, pLen, time, state);\r\n                    }\r\n                }\r\n            }\r\n            // messagesのどこまで送信したかを記憶して、次回コールバック時にそこから処理を始める\r\n            states.playIndices[16] = idx;\r\n        }\r\n\r\n        // 1msコールバックが呼ばれた回数をカウント\r\n        cnt ++;\r\n\r\n        // 変数を反映 //\r\n        this.updatePreTime = updateNowTime;\r\n        this.pPreTime = pPreTime;\r\n        this.cPreTime = cPreTime;\r\n        this.pTimeSum = pTimeSum;\r\n        this.cTimeSum = cTimeSum;\r\n        this.cnt = cnt;\r\n    }\r\n\r\n    /**\r\n     * noteOnの時間になったか監視\r\n     * @param {PicoAudio} picoAudio PicoAudioインスタンス\r\n     */\r\n    static checkNoteOn(picoAudio) {\r\n        const context = picoAudio.context;\r\n        const trigger = picoAudio.trigger;\r\n        const states = picoAudio.states;\r\n        const noteOnAry = picoAudio.states.noteOnAry;\r\n        const noteOffAry = picoAudio.states.noteOffAry;\r\n\r\n        for (let i=0; i<noteOnAry.length; i++) {\r\n            const tempNote = noteOnAry[i];\r\n            const nowTime = context.currentTime - states.startTime;\r\n            if (tempNote.startTime - nowTime <= 0) {\r\n                ArrayUtil.delete(noteOnAry, i); // noteOnAry.splice(i, 1); の高速化\r\n                noteOffAry.push(tempNote);\r\n\r\n                // イベント発火\r\n                if (trigger.isNoteTrigger) trigger.noteOn(tempNote);\r\n                picoAudio.fireEvent('noteOn', tempNote);\r\n\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * noteOffの時間になったか監視\r\n     * @param {PicoAudio} picoAudio PicoAudioインスタンス\r\n     */\r\n    static checkNoteOff(picoAudio) {\r\n        const context = picoAudio.context;\r\n        const trigger = picoAudio.trigger;\r\n        const states = picoAudio.states;\r\n        const noteOffAry = picoAudio.states.noteOffAry;\r\n\r\n        for (let i=0; i<noteOffAry.length; i++) {\r\n            const tempNote = noteOffAry[i];\r\n            const nowTime = context.currentTime - states.startTime;\r\n            if ((tempNote.channel != 9 && tempNote.stopTime - nowTime <= 0)\r\n                || (tempNote.channel == 9 && tempNote.drumStopTime - nowTime <= 0)) {\r\n                ArrayUtil.delete(noteOffAry, i); // noteOffAry.splice(i, 1); の高速化\r\n                picoAudio.clearFunc(\"note\", tempNote);\r\n\r\n                // イベント発火\r\n                if (trigger.isNoteTrigger) trigger.noteOff(tempNote);\r\n                picoAudio.fireEvent('noteOff', tempNote);\r\n\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n}","import UpdateNote from './play/update-note.js';\r\nimport {Number} from '../util/ponyfill.js';\r\n\r\nexport default function play(isSongLooping) {\r\n    const context = this.context;\r\n    const settings = this.settings;\r\n    const trigger = this.trigger;\r\n    const states = this.states;\r\n\r\n    // 再生中の場合、処理しない //\r\n    if (states.isPlaying) return;\r\n\r\n    // WebMIDIの場合、少し待ってから再生する //\r\n    if (settings.isWebMIDI && !isSongLooping) {\r\n        // Web MIDI API使用時はstop()から800ms程待機すると音がバグりにくい\r\n        if (states.webMIDIWaitState != \"completed\") {\r\n            if (states.webMIDIWaitState != \"waiting\") { // play()連打の対策\r\n                // stop()から1000ms後にplay()を実行\r\n                states.webMIDIWaitState = \"waiting\";\r\n                let waitTime = 1000 - (context.currentTime - states.webMIDIStopTime)*1000;\r\n                if (states.webMIDIStopTime == 0) waitTime = 1000; // MIDI Portをopenして最初に呼び出すときも少し待つ\r\n                setTimeout(() => {\r\n                    states.webMIDIWaitState = \"completed\";\r\n                    states.isPlaying = false;\r\n                    this.play();\r\n                }, waitTime);\r\n            }\r\n            return;\r\n        } else {\r\n            states.webMIDIWaitState = null;\r\n        }\r\n    }\r\n\r\n    // 変数を用意 //\r\n    const currentTime = context.currentTime;\r\n    this.isPlayed = true;\r\n    states.isPlaying = true;\r\n    states.startTime = !states.startTime && !states.stopTime ? currentTime : (states.startTime + currentTime - states.stopTime);\r\n    states.stopFuncs = [];\r\n\r\n    // 冒頭の余白をスキップ //\r\n    if (settings.isSkipBeginning) {\r\n        const firstNoteOnTime = this.firstNoteOnTime;\r\n        if (-states.startTime + currentTime < firstNoteOnTime) {\r\n            this.setStartTime(firstNoteOnTime + states.startTime - currentTime);\r\n        }\r\n    }\r\n\r\n    // 曲終了コールバックを予約 //\r\n    let reserveSongEnd;\r\n    const reserveSongEndFunc = () => {\r\n        this.clearFunc(\"rootTimeout\", reserveSongEnd);\r\n        const finishTime = (settings.isCC111 && this.cc111Time != -1) ? this.lastNoteOffTime : this.getTime(Number.MAX_SAFE_INTEGER());\r\n        if (finishTime - context.currentTime + states.startTime <= 0) {\r\n            // 予定の時間以降に曲終了\r\n            trigger.songEnd();\r\n            this.onSongEnd();\r\n            this.fireEvent('songEnd');\r\n        } else {\r\n            // 処理落ちしたりしてまだ演奏中の場合、1ms後に曲終了コールバックを呼び出すよう予約\r\n            reserveSongEnd = setTimeout(reserveSongEndFunc, 1);\r\n            this.pushFunc({\r\n                rootTimeout: reserveSongEnd,\r\n                stopFunc: () => { clearTimeout(reserveSongEnd); }\r\n            });\r\n        }\r\n    };\r\n    const finishTime = settings.isCC111 && this.cc111Time != -1\r\n        ? this.lastNoteOffTime\r\n        : this.getTime(Number.MAX_SAFE_INTEGER());\r\n    const reserveSongEndTime = (finishTime - context.currentTime + states.startTime) * 1000;\r\n    reserveSongEnd = setTimeout(reserveSongEndFunc, reserveSongEndTime);\r\n    this.pushFunc({\r\n        rootTimeout: reserveSongEnd,\r\n        stopFunc: () => { clearTimeout(reserveSongEnd); }\r\n    });\r\n\r\n    // 再生開始をコールバックに通知 //\r\n    trigger.play();\r\n    this.fireEvent('play');\r\n\r\n    // 1ms毎コールバックの準備 //\r\n    UpdateNote.init(this, currentTime);\r\n\r\n    // 1ms毎コールバックを開始 //\r\n    const reserve = setInterval(() => {\r\n        UpdateNote.update(this);\r\n    }, 1);\r\n    this.pushFunc({\r\n        rootTimeout: reserve,\r\n        stopFunc: () => { clearInterval(reserve); }\r\n    });\r\n}","export default function stop(isSongLooping) {\r\n    const states = this.states;\r\n\r\n    // 再生していない場合、何もしない //\r\n    if (states.isPlaying == false) return;\r\n\r\n    // ステータスを停止状態にする・終了処理を呼ぶ //\r\n    states.isPlaying = false;\r\n    states.stopTime = this.context.currentTime;\r\n    states.stopFuncs.forEach((n) => { // 再生中の音の停止関数を呼ぶ\r\n        n.stopFunc();\r\n    });\r\n    states.stopFuncs = [];\r\n    states.playIndices.forEach((n, i, ary) => {\r\n        ary[i] = 0;\r\n    });\r\n    states.noteOnAry = [];\r\n    states.noteOffAry = [];\r\n\r\n    // WebMIDIで再生中の場合、停止メッセージを送信 //\r\n    if (this.settings.isWebMIDI) {\r\n        if (isSongLooping)\r\n            return;\r\n        if (this.settings.WebMIDIPortOutput == null)\r\n            return;\r\n        states.webMIDIStopTime = this.context.currentTime;\r\n        setTimeout(() => {\r\n            for (let t=0; t<16; t++) {\r\n                this.settings.WebMIDIPortOutput.send([0xB0+t, 120, 0]);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    // 停止をコールバックに通知 //\r\n    this.trigger.stop();\r\n    this.fireEvent('stop');\r\n}","export default function createBaseNote(option, isDrum, isExpression, nonChannel, nonStop) {\r\n    // 最低限の変数を準備（無音の場合は処理終了するため） //\r\n    const settings = this.settings;\r\n    const context = this.context;\r\n    const songStartTime = this.states.startTime;\r\n    const channel = nonChannel ? 0 : (option.channel || 0);\r\n    const velocity = (option.velocity) * Number(nonChannel ? 1 : (this.channels[channel][2] != null ? this.channels[channel][2] : 1)) * settings.generateVolume;\r\n    let isGainValueZero = true;\r\n\r\n    // 無音の場合は処理終了 //\r\n    if (velocity <= 0) return {isGainValueZero: true};\r\n\r\n    // 音量の変化を設定 //\r\n    const expGainValue = velocity * ((option.expression ? option.expression[0].value : 100) / 127);\r\n    const expGainNode = context.createGain();\r\n    expGainNode.gain.value = expGainValue;\r\n    if (isExpression) {\r\n        option.expression ? option.expression.forEach((p) => {\r\n            const v = velocity * (p.value / 127);\r\n            if (v > 0) isGainValueZero = false;\r\n            expGainNode.gain.setValueAtTime(\r\n                v,\r\n                p.time + songStartTime\r\n            );\r\n        }) : false;\r\n    } else {\r\n        if (expGainValue > 0) {\r\n            isGainValueZero = false;\r\n        }\r\n    }\r\n\r\n    // 無音の場合は処理終了 //\r\n    if (isGainValueZero) { // 音量が常に0なら音を鳴らさない\r\n        return {isGainValueZero: true};\r\n    }\r\n\r\n    // 全ての変数を準備 //\r\n    const start = option.startTime + songStartTime;\r\n    const stop = option.stopTime + songStartTime;\r\n    const pitch = settings.basePitch * Math.pow(Math.pow(2, 1/12), (option.pitch || 69) - 69);\r\n    const oscillator = !isDrum ? context.createOscillator() : context.createBufferSource();\r\n    const panNode = context.createStereoPanner ? context.createStereoPanner()\r\n        : context.createPanner ? context.createPanner()\r\n        : { pan: { setValueAtTime: ()=>{} } };\r\n    const gainNode = context.createGain();\r\n    const stopGainNode = context.createGain();\r\n\r\n    // ドラムはホワイトノイズ、ドラム以外はoscillatorを設定 //\r\n    // oscillatorはピッチ変動も設定 //\r\n    if (!isDrum) {\r\n        oscillator.type = option.type || \"sine\";\r\n        oscillator.detune.value = 0;\r\n        oscillator.frequency.value = pitch;\r\n        option.pitchBend ? option.pitchBend.forEach((p) => {\r\n            oscillator.frequency.setValueAtTime(\r\n                settings.basePitch * Math.pow(Math.pow(2, 1/12), option.pitch - 69 + p.value),\r\n                p.time + songStartTime\r\n            );\r\n        }) : false;\r\n    } else {\r\n        oscillator.loop = true;\r\n        oscillator.buffer = this.whitenoise;\r\n    }\r\n\r\n    // パンの初期値を設定 //\r\n    const panValue = option.pan && option.pan[0].value != 64 ? (option.pan[0].value / 127) * 2 - 1 : 0;\r\n    initPanValue(context, panNode, panValue);\r\n\r\n    // パンの変動を設定 //\r\n    if (context.createStereoPanner || context.createPanner) {\r\n        // StereoPannerNode or PannerNode がどちらかでも使える\r\n        let firstNode = true;\r\n        if (context.createStereoPanner) {\r\n            // StereoPannerNode が使える\r\n            option.pan ? option.pan.forEach((p) => {\r\n                if (firstNode) {\r\n                    firstNode = false;\r\n                    return;\r\n                }\r\n                let v = p.value == 64 ? 0 : (p.value / 127) * 2 - 1;\r\n                if (v > 1.0) v = 1.0;\r\n                panNode.pan.setValueAtTime(\r\n                    v,\r\n                    p.time + songStartTime\r\n                );\r\n            }) : false;\r\n        } else if (context.createPanner) {\r\n            // StereoPannerNode が未サポート、PannerNode が使える\r\n            if (panNode.positionX) {\r\n                // setValueAtTimeが使える\r\n                // Old Browser\r\n                let firstPan = true;\r\n                option.pan ? option.pan.forEach((p) => {\r\n                    if (firstPan) {\r\n                        firstPan = false;\r\n                        return;\r\n                    }\r\n                    const v = p.value == 64 ? 0 : (p.value / 127) * 2 - 1;\r\n                    const posObj = convPosition(v);\r\n                    panNode.positionX.setValueAtTime(posObj.x, p.time + songStartTime);\r\n                    panNode.positionY.setValueAtTime(posObj.y, p.time + songStartTime);\r\n                    panNode.positionZ.setValueAtTime(posObj.z, p.time + songStartTime);\r\n                }) : false;\r\n            } else {\r\n                // iOS\r\n                // setValueAtTimeが使えないためsetTimeoutでパンの動的変更\r\n                option.pan ? option.pan.forEach((p) => {\r\n                    if (firstNode) {\r\n                        firstNode = false;\r\n                        return;\r\n                    }\r\n                    const reservePan = setTimeout(() => {\r\n                        this.clearFunc(\"pan\", reservePan);\r\n                        let v = p.value == 64 ? 0 : (p.value / 127) * 2 - 1;\r\n                        if (v > 1.0) v = 1.0;\r\n                        const posObj = convPosition(v);\r\n                        panNode.setPosition(posObj.x, posObj.y, posObj.z);\r\n                    }, (p.time + songStartTime - context.currentTime) * 1000);\r\n                    this.pushFunc({\r\n                        pan: reservePan,\r\n                        stopFunc: () => { clearTimeout(reservePan); }\r\n                    });\r\n                }) : false;\r\n            }\r\n        }\r\n        oscillator.connect(panNode);\r\n        panNode.connect(expGainNode);\r\n    } else {\r\n        // StereoPannerNode、PannerNode が未サポート\r\n        oscillator.connect(expGainNode);\r\n    }\r\n\r\n    // AudioNodeを接続 //\r\n    expGainNode.connect(gainNode);\r\n    gainNode.connect(stopGainNode);\r\n    stopGainNode.connect(this.masterGainNode);\r\n    this.masterGainNode.connect(context.destination);\r\n\r\n    // モジュレーションの変動を設定 //\r\n    let modulationOscillator;\r\n    let modulationGainNode;\r\n    if (!isDrum && option.modulation && (option.modulation.length >= 2 || option.modulation[0].value > 0)) {\r\n        modulationOscillator = context.createOscillator();\r\n        modulationGainNode = context.createGain();\r\n        let firstNode = true;\r\n        option.modulation ? option.modulation.forEach((p) => {\r\n            if (firstNode) {\r\n                firstNode = false;\r\n                return;\r\n            }\r\n            let m = p.value / 127;\r\n            if (m > 1.0) m = 1.0;\r\n            modulationGainNode.gain.setValueAtTime(\r\n                pitch * 10 / 440 * m,\r\n                p.time + songStartTime\r\n            );\r\n        }) : false;\r\n        let m = option.modulation ? option.modulation[0].value / 127 : 0;\r\n        if (m > 1.0) m = 1.0;\r\n        modulationGainNode.gain.value = pitch * 10 / 440 * m;\r\n        modulationOscillator.frequency.value = 6;\r\n        modulationOscillator.connect(modulationGainNode);\r\n        modulationGainNode.connect(oscillator.frequency);\r\n    }\r\n\r\n    // リバーブの変動を設定 //\r\n    if (this.settings.isReverb && option.reverb && (option.reverb.length >= 2 || option.reverb[0].value > 0)) {\r\n        const convolver = this.convolver;\r\n        const convolverGainNode = context.createGain();\r\n        let firstNode = true;\r\n        option.reverb ? option.reverb.forEach((p) => {\r\n            if (firstNode) {\r\n                firstNode = false;\r\n                return;\r\n            }\r\n            let r = p.value / 127;\r\n            if (r > 1.0) r = 1.0;\r\n            convolverGainNode.gain.setValueAtTime(\r\n                r,\r\n                p.time + songStartTime\r\n            );\r\n        }) : false;\r\n        let r = option.reverb ? option.reverb[0].value / 127 : 0;\r\n        if (r > 1.0) r = 1.0;\r\n        convolverGainNode.gain.value = r;\r\n        gainNode.connect(stopGainNode);\r\n        stopGainNode.connect(convolverGainNode);\r\n        convolverGainNode.connect(convolver);\r\n    }\r\n\r\n    // コーラスの変動を設定 //\r\n    if (this.settings.isChorus && option.chorus && (option.chorus.length >= 2 || option.chorus[0].value > 0)) {\r\n        const chorusDelayNode = this.chorusDelayNode;\r\n        const chorusGainNode = context.createGain();\r\n        let firstNode = true;\r\n        option.chorus ? option.chorus.forEach((p) => {\r\n            if (firstNode) {\r\n                firstNode = false;\r\n                return;\r\n            }\r\n            let c = p.value / 127;\r\n            if (c > 1.0) c = 1.0;\r\n            chorusGainNode.gain.setValueAtTime(\r\n                c,\r\n                p.time + songStartTime\r\n            );\r\n        }) : false;\r\n        let c = option.chorus ? option.chorus[0].value / 127 : 0;\r\n        if (c > 1.0) c = 1.0;\r\n        chorusGainNode.gain.value = c;\r\n        gainNode.connect(stopGainNode);\r\n        stopGainNode.connect(chorusGainNode);\r\n        chorusGainNode.connect(chorusDelayNode);\r\n    }\r\n\r\n    // モジュレーションをスタート //\r\n    if (modulationOscillator) {\r\n        modulationOscillator.start(start);\r\n        this.stopAudioNode(modulationOscillator, stop, modulationGainNode);\r\n    }\r\n\r\n    // oscillator又はホワイトノイズをスタート //\r\n    oscillator.start(start);\r\n    if (!isDrum && !nonChannel && !nonStop) {\r\n        this.stopAudioNode(oscillator, stop, stopGainNode);\r\n    }\r\n\r\n    // AudioNodeやパラメータを返す //\r\n    return {\r\n        start: start,\r\n        stop: stop,\r\n        pitch: pitch,\r\n        channel: channel,\r\n        velocity: velocity,\r\n        oscillator: oscillator,\r\n        panNode: panNode,\r\n        gainNode: gainNode,\r\n        stopGainNode: stopGainNode,\r\n        isGainValueZero: false\r\n    };\r\n}\r\n\r\n/**\r\n * パンの初期値を設定\r\n * @param {PannerNode | StereoPannerNode} panNode \r\n * @param {number} panValue \r\n */\r\nfunction initPanValue(context, panNode, panValue) {\r\n    if (context.createStereoPanner) {\r\n        if(panValue > 1.0) panValue = 1.0;\r\n        panNode.pan.value = panValue;\r\n    } else if(context.createPanner) {\r\n        // iOS, Old Browser\r\n        const posObj = convPosition(panValue);\r\n        panNode.panningModel = \"equalpower\";\r\n        panNode.setPosition(posObj.x, posObj.y, posObj.z);\r\n    }\r\n}\r\n\r\n/**\r\n * pan値を基に、PannerNode用の値を{x, y, z}で返す\r\n * @param {number} panValue panの値\r\n * @returns Object{x, y, z}\r\n */\r\nfunction convPosition(panValue) {\r\n    if (panValue > 1.0) panValue = 1.0;\r\n\r\n    const obj = {};\r\n    const panAngle = panValue * 90;\r\n    obj.x = Math.sin(panAngle * (Math.PI / 180));\r\n    obj.y = 0;\r\n    obj.z = -Math.cos(panAngle * (Math.PI / 180));\r\n    return obj;\r\n}","export default function createNote(option) {\r\n    const note = this.createBaseNote(option, false, true, false, true); // oscillatorのstopはこちらで実行するよう指定\r\n    if (note.isGainValueZero) return null;\r\n\r\n    const oscillator = note.oscillator;\r\n    const gainNode = note.gainNode;\r\n    const stopGainNode = note.stopGainNode;\r\n    let isPizzicato = false;\r\n    let isNoiseCut = false;\r\n\r\n    let note2;\r\n\r\n    // 音色の設定 //\r\n    switch (this.channels[note.channel][0]*1000 || option.instrument) {\r\n        // Sine\r\n        case 1000:\r\n        case  6: case 15: case 24: case 26: case 46: case 50: case 51:\r\n        case 52: case 53: case 54: case 82: case 85: case 86:\r\n        {\r\n            oscillator.type = \"sine\";\r\n            gainNode.gain.value *= 1.5;\r\n            break;\r\n        }\r\n        // Square\r\n        case 2000:\r\n        case  4: case 12: case 13: case 16: case 19: case 20: case 32: case 34: case 45: case 48: case 49:\r\n        case 55: case 56: case 57: case 61: case 62: case 63: case 71: case 72: case 73: case 74: case 75:\r\n        case 76: case 77: case 78: case 79: case 80: case 84:\r\n        {\r\n            oscillator.type = \"square\";\r\n            gainNode.gain.value *= 0.8;\r\n            break;\r\n        }\r\n        // Sawtooth\r\n        case 3000:\r\n        case  0: case  1: case  2: case  3: case  7: case 17: case 18: case 21: case 22: case 23: case 27:\r\n        case 28: case 29: case 30: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43:\r\n        case 44: case 47: case 59: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 87:\r\n        {\r\n            oscillator.type = \"sawtooth\";\r\n            break;\r\n        }\r\n        // Triangle\r\n        case 4000:\r\n        case  8: case  9: case 10: case 11: case 14: case 25: case 31: case 33: case 35: case 58: case 60:\r\n        case 83: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95:\r\n        {\r\n            oscillator.type = \"triangle\";\r\n            gainNode.gain.value *= 1.5;\r\n            break;\r\n        }\r\n        // Other - Square\r\n        default:{\r\n            oscillator.type = \"square\";\r\n        }\r\n    }\r\n\r\n    // 音の終わりのプチプチノイズが気になるので、音の終わりに5ms減衰してノイズ軽減 //\r\n    if ((oscillator.type == \"sine\" || oscillator.type == \"triangle\")\r\n        && !isPizzicato && note.stop - note.start > 0.01) {\r\n        isNoiseCut = true;\r\n    }\r\n\r\n    // 減衰の設定 //\r\n    switch (this.channels[note.channel][1]/10 || option.instrument) {\r\n        // ピッチカート系減衰\r\n        case 0.2:\r\n        case 12: case 13: case 45: case 55:\r\n        {\r\n            isPizzicato = true;\r\n            gainNode.gain.value *= 1.1;\r\n            gainNode.gain.setValueAtTime(gainNode.gain.value, note.start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, note.start+0.2);\r\n            this.stopAudioNode(oscillator, note.start+0.2, stopGainNode);\r\n            break;\r\n        }\r\n        // ピアノ程度に伸ばす系\r\n        case 0.3:\r\n        case  0: case  1: case  2: case  3: case  6: case  9: case 11: case 14: case 15:\r\n        case 32: case 36: case 37: case 46: case 47:\r\n        {\r\n            gainNode.gain.value *= 1.1;\r\n            const decay = (128-option.pitch)/128;\r\n            gainNode.gain.setValueAtTime(gainNode.gain.value, note.start);\r\n            gainNode.gain.linearRampToValueAtTime(gainNode.gain.value*0.85, note.start+decay*decay/8);\r\n            gainNode.gain.linearRampToValueAtTime(gainNode.gain.value*0.8, note.start+decay*decay/4);\r\n            gainNode.gain.setTargetAtTime(0, note.start+decay*decay/4, 5*decay*decay);\r\n            this.stopAudioNode(oscillator, note.stop, stopGainNode, isNoiseCut);\r\n            break;\r\n        }\r\n        // ギター系\r\n        case 0.4:\r\n        case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 34:\r\n        {\r\n            gainNode.gain.value *= 1.1;\r\n            gainNode.gain.setValueAtTime(gainNode.gain.value, note.start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, note.start+1.0+note.velocity*4);\r\n            this.stopAudioNode(oscillator, note.stop, stopGainNode, isNoiseCut);\r\n            break;\r\n        }\r\n        // 減衰していくけど終わらない系\r\n        case 0.5:\r\n        case 4: case 5: case 7: case 8: case 10: case 33: case 35:\r\n        {\r\n            gainNode.gain.value *= 1.0;\r\n            gainNode.gain.setValueAtTime(gainNode.gain.value, note.start);\r\n            gainNode.gain.linearRampToValueAtTime(gainNode.gain.value*0.95, note.start+0.1);\r\n            gainNode.gain.setValueAtTime(gainNode.gain.value*0.95, note.start+0.1);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, note.start+2.0+note.velocity*10);\r\n            this.stopAudioNode(oscillator, note.stop, stopGainNode, isNoiseCut);\r\n            break;\r\n        }\r\n        case 119: // Reverse Cymbal\r\n        {\r\n            gainNode.gain.value = 0;\r\n            this.stopAudioNode(oscillator, note.stop, stopGainNode, isNoiseCut);\r\n            note2 = this.createBaseNote(option, true, true);\r\n            if (note2.isGainValueZero) break;\r\n            note2.oscillator.playbackRate.setValueAtTime((option.pitch+1)/128, note.start);\r\n            note2.gainNode.gain.setValueAtTime(0, note.start);\r\n            note2.gainNode.gain.linearRampToValueAtTime(1.3, note.start+2);\r\n            this.stopAudioNode(note2.oscillator, note.stop, note2.stopGainNode);\r\n            break;\r\n        }\r\n        default: {\r\n            gainNode.gain.value *= 1.1;\r\n            gainNode.gain.setValueAtTime(gainNode.gain.value, note.start);\r\n            this.stopAudioNode(oscillator, note.stop, stopGainNode, isNoiseCut);\r\n        }\r\n    }\r\n\r\n    // 音をストップさせる関数を返す //\r\n    return () => {\r\n        this.stopAudioNode(oscillator, 0, stopGainNode, true);\r\n        if (note2 && note2.oscillator) this.stopAudioNode(note2.oscillator, 0, note2.stopGainNode, true);\r\n    };\r\n}","export default function createPercussionNote(option) {\r\n    const note = this.createBaseNote(option, true, false);\r\n    if (note.isGainValueZero) return null;\r\n\r\n    const source = note.oscillator;\r\n    const gainNode = note.gainNode;\r\n    const stopGainNode = note.stopGainNode;\r\n    let start = note.start;\r\n    const velocity = 1; // ドラム全体の音量調整用\r\n    const note2 = this.createBaseNote(option, false, false, true);\r\n    const oscillator = note2.oscillator;\r\n    const gainNode2 = note2.gainNode;\r\n    const stopGainNode2 = note2.stopGainNode;\r\n    const nextSameNoteOnInterval = option.nextSameNoteOnInterval;\r\n\r\n    // oscillator.frequency.setValueAtTime()がcurrentTimeより遅れると周波数設定がされないので対策\r\n    if (start < this.context.currentTime) start = this.context.currentTime;\r\n    let stopAudioTime = 0;\r\n    let stopAudioTime2 = 0;\r\n    switch (option.pitch) {\r\n        // 元々のパーカッション音源 //\r\n        // Bass drum\r\n        case 35:\r\n        case 36:\r\n            // w\r\n            gainNode.gain.value = velocity*0.6;\r\n            source.playbackRate.value = 0.02;\r\n            stopAudioTime = 0.07;\r\n            // s\r\n            gainNode2.gain.value = velocity*1.1;\r\n            oscillator.frequency.setValueAtTime(120, start);\r\n            oscillator.frequency.linearRampToValueAtTime(50, start+0.07);\r\n            stopAudioTime2 = 0.07;\r\n            break;\r\n        // Snare\r\n        case 38:\r\n        case 40:\r\n            // w\r\n            source.playbackRate.value = 0.7;\r\n            stopAudioTime = 0.05;\r\n            // s\r\n            gainNode2.gain.setValueAtTime(velocity*0.8, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.05);\r\n            oscillator.frequency.setValueAtTime(300, start);\r\n            oscillator.frequency.linearRampToValueAtTime(200, start+0.05);\r\n            stopAudioTime2 = 0.05;\r\n            break;\r\n        // Toms\r\n        case 41: case 43: case 45:\r\n        case 47: case 48: case 50:\r\n            // w\r\n            source.playbackRate.value = 0.01;\r\n            stopAudioTime = 0.1;\r\n            // s\r\n            oscillator.type = \"square\";\r\n            gainNode2.gain.setValueAtTime(velocity, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.01, start+0.1);\r\n            oscillator.frequency.setValueAtTime(150+20*(option.pitch-40), start);\r\n            oscillator.frequency.linearRampToValueAtTime(50+20*(option.pitch-40), start+0.1);\r\n            stopAudioTime2 = 0.1;\r\n            break;\r\n        // Close Hihat\r\n        case 42:\r\n        case 44:\r\n            source.playbackRate.value = 1.5;\r\n            stopAudioTime = 0.02;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        // Open Hihat\r\n        case 46:\r\n            source.playbackRate.value = 1.5;\r\n            stopAudioTime = 0.3;\r\n            gainNode.gain.setValueAtTime(velocity*0.9, start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, start+0.3);\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        // Cymbal\r\n        case 49: case 52:\r\n        case 53: case 55: case 57:\r\n            source.playbackRate.value = 1.2;\r\n            stopAudioTime = 0.5;\r\n            gainNode.gain.setValueAtTime(velocity*1, start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, start+0.5);\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        // Cymbal2\r\n        case 51:\r\n            source.playbackRate.value = 1.1;\r\n            stopAudioTime = 0.4;\r\n            gainNode.gain.setValueAtTime(velocity*0.8, start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, start+0.4);\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        // Cymbal3\r\n        case 59:\r\n            source.playbackRate.value = 1.8;\r\n            stopAudioTime = 0.3;\r\n            gainNode.gain.setValueAtTime(velocity*0.5, start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, start+0.3);\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        // Bongo\r\n        case 60: case 61:\r\n            // w\r\n            source.playbackRate.value = 0.03;\r\n            stopAudioTime = 0.03;\r\n            // s\r\n            gainNode2.gain.setValueAtTime(velocity*0.8, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.1);\r\n            oscillator.frequency.setValueAtTime(400-40*(option.pitch-60), start);\r\n            oscillator.frequency.linearRampToValueAtTime(450-40*(option.pitch-60), start+0.1);\r\n            stopAudioTime2 = 0.1;\r\n            break;\r\n        // mute Conga\r\n        case 62:\r\n            // w\r\n            source.playbackRate.value = 0.03;\r\n            stopAudioTime = 0.03;\r\n            // s\r\n            gainNode2.gain.setValueAtTime(velocity, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.03);\r\n            oscillator.frequency.setValueAtTime(200, start);\r\n            oscillator.frequency.linearRampToValueAtTime(250, start+0.03);\r\n            stopAudioTime2 = 0.03;\r\n            break;\r\n        // open Conga\r\n        case 63: case 64:\r\n            // w\r\n            source.playbackRate.value = 0.03;\r\n            stopAudioTime = 0.03;\r\n            // s\r\n            gainNode2.gain.setValueAtTime(velocity, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.1);\r\n            oscillator.frequency.setValueAtTime(200-30*(option.pitch-63), start);\r\n            oscillator.frequency.linearRampToValueAtTime(250-30*(option.pitch-63), start+0.1);\r\n            stopAudioTime2 = 0.1;\r\n            break;\r\n        // Cowbell, Claves\r\n        case 56:\r\n        case 75:\r\n            // w\r\n            source.playbackRate.value = 0.01;\r\n            stopAudioTime = 0.1;\r\n            // s\r\n            gainNode2.gain.setValueAtTime(velocity, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.1);\r\n            oscillator.frequency.setValueAtTime(1000+48*(option.pitch-56), start);\r\n            stopAudioTime2 = 0.1;\r\n            break;\r\n        // mute triangle\r\n        case 80:\r\n            // w\r\n            source.playbackRate.value = 5;\r\n            gainNode.gain.setValueAtTime(velocity*0.5, start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, start+0.2);\r\n            stopAudioTime = 0.05;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            gainNode2.gain.setValueAtTime(velocity*0.7, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.2);\r\n            oscillator.frequency.setValueAtTime(6000, start);\r\n            stopAudioTime2 = 0.05;\r\n            break;\r\n        // open triangle\r\n        case 81:\r\n            // w\r\n            source.playbackRate.value = 5;\r\n            gainNode.gain.setValueAtTime(velocity*0.9, start);\r\n            gainNode.gain.linearRampToValueAtTime(0.0, start+0.5);\r\n            stopAudioTime = 0.5;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            gainNode2.gain.setValueAtTime(velocity*0.8, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0.0, start+0.3);\r\n            oscillator.frequency.setValueAtTime(6000, start);\r\n            stopAudioTime2 = 0.3;\r\n            break;\r\n\r\n\r\n\r\n        // 新しいパーカッション音源 //\r\n\r\n        // Snare Drum\r\n        case 37: // Side Stick\r\n        {\r\n            // w\r\n            source.playbackRate.value = 0.26;\r\n            gainNode.gain.setValueAtTime(velocity*1.5, start);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.041);\r\n            stopAudioTime = 0.041;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(330, start);\r\n            oscillator.frequency.linearRampToValueAtTime(120, start+0.02);\r\n            gainNode2.gain.setValueAtTime(velocity, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.02);\r\n            stopAudioTime2 = 0.02;\r\n            break;\r\n        }\r\n        case 39: // Hand Clap\r\n        {\r\n            // w\r\n            source.playbackRate.value = 0.5;\r\n            gainNode.gain.setValueAtTime(velocity*1.3, start);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.010);\r\n            gainNode.gain.setValueAtTime(velocity*1.3, start+0.0101);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.020);\r\n            gainNode.gain.setValueAtTime(velocity*1.3, start+0.0201);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.09);\r\n            stopAudioTime = 0.09;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            oscillator.frequency.setValueAtTime(180, start);\r\n            gainNode2.gain.setValueAtTime(velocity*0.8, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.010);\r\n            gainNode2.gain.setValueAtTime(velocity*0.8, start+0.0101);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.020);\r\n            gainNode2.gain.setValueAtTime(velocity*0.8, start+0.0201);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.030);\r\n            stopAudioTime2 = 0.11;\r\n            break;\r\n        }\r\n        // Bell\r\n        case 54: // Tambourine\r\n        {\r\n            // w\r\n            source.playbackRate.setValueAtTime(1, start);\r\n            let v = option.pitch==54 ? 1 : 0.4;\r\n            const len = option.pitch==54 ? 0.01 : 0;\r\n            gainNode.gain.setValueAtTime(velocity*v/2, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*v, start+len);\r\n            gainNode.gain.setTargetAtTime(0, start+len, 0.05);\r\n            stopAudioTime = 0.3;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(option.pitch==54 ? 6000 : 495, start);\r\n            v = option.pitch==54 ? 1 : 2;\r\n            gainNode2.gain.setValueAtTime(velocity*v/2, start);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*v, start+len);\r\n            gainNode2.gain.setTargetAtTime(0, start+len, 0.05);\r\n            stopAudioTime2 = 0.3;\r\n            break;\r\n        }\r\n        case 58: // Vibraslap\r\n        {\r\n            // w s\r\n            source.playbackRate.setValueAtTime(0.6, start);\r\n            source.playbackRate.linearRampToValueAtTime(1, start+0.8);\r\n            const len = 40;\r\n            gainNode.gain.setValueAtTime(velocity*1.5, start);\r\n            gainNode2.gain.setValueAtTime(velocity*0.5, start);\r\n            for (let i=0; i<len; i++) {\r\n                gainNode.gain.linearRampToValueAtTime(velocity*0.1*(len-i)/len, start+i/len*0.8);\r\n                gainNode.gain.linearRampToValueAtTime(velocity*1.5*(len-(i+1))/len, start+(i+0.99)/len*0.8);\r\n                gainNode2.gain.linearRampToValueAtTime(velocity*0.025*(len-i)/len, start+i/len*0.8);\r\n                gainNode2.gain.linearRampToValueAtTime(velocity*0.25*(len-(i+1))/len, start+(i+0.99)/len*0.8);\r\n            }\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.8);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.8);\r\n            stopAudioTime = 0.8;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            oscillator.frequency.setValueAtTime(1000, start);\r\n            stopAudioTime2 = 0.8;\r\n            break;\r\n        }\r\n        case 65: // High Timbale\r\n        case 66: // Low Timbale\r\n        {\r\n            const len = option.pitch==65 ? 0.22 : 0.25;\r\n            // w\r\n            source.playbackRate.setValueAtTime(option.pitch==65 ? 0.25 : 0.22, start);\r\n            source.playbackRate.linearRampToValueAtTime(option.pitch==65 ? 0.2 : 0.18, start+len);\r\n            gainNode.gain.setValueAtTime(velocity*1.3, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*0.2, start+len/3.5);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+len);\r\n            stopAudioTime = len;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            oscillator.frequency.setValueAtTime(option.pitch==65 ? 190*1.07 : 136*1.07, start);\r\n            oscillator.frequency.linearRampToValueAtTime(option.pitch==65 ? 190 : 136, start+0.1);\r\n            gainNode2.gain.setValueAtTime(velocity*3.2, start);\r\n            gainNode2.gain.setTargetAtTime(0, start, 0.08);\r\n            stopAudioTime2 = 1;\r\n            break;\r\n        }\r\n        case 67: // High Agogo\r\n        case 68: // Low Agogo\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(velocity*0.5, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*0.1, start+0.02);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.08);\r\n            stopAudioTime = 0.08;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            oscillator.frequency.setValueAtTime(option.pitch==67 ? 1430 : 1055, start);\r\n            gainNode2.gain.setValueAtTime(velocity*2, start);\r\n            gainNode2.gain.setTargetAtTime(0, start, 0.06);\r\n            stopAudioTime2 = 0.75;\r\n            break;\r\n        }\r\n        case 69: // Cabasa\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(velocity*0.3, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*0.8, start+0.03);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.08);\r\n            stopAudioTime = 0.08;\r\n            // s\r\n            gainNode2.gain.value = 0;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        }\r\n        case 70: // Maracas\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(velocity*1.2, start);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.06);\r\n            stopAudioTime = 0.06;\r\n            // s\r\n            gainNode2.gain.value = 0;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        }\r\n        case 71: // Short Whistle\r\n        case 72: // Long Whistle\r\n        {\r\n            // w\r\n            gainNode.gain.value = 0;\r\n            stopAudioTime = 0;\r\n            // s\r\n            const len = option.pitch==71 ? 0.07 : 0.4;\r\n            oscillator.type = \"triangle\";\r\n            oscillator.frequency.setValueAtTime(option.pitch==71 ? 2408 : 2105, start);\r\n            gainNode2.gain.setValueAtTime(0, start);\r\n            for (let i=0; i<len*74; i++) {\r\n                gainNode2.gain.linearRampToValueAtTime(velocity*2.5, start+(i+0.2)/75);\r\n                gainNode2.gain.linearRampToValueAtTime(velocity*0.5, start+(i+0.9)/75);\r\n            }\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+len);\r\n            stopAudioTime2 = len;\r\n            break;\r\n        }\r\n        case 73: // Short Guiro\r\n        case 74: // Long Guiro\r\n        {\r\n            // w\r\n            const len = option.pitch==73 ? 0.05 : 0.35;\r\n            source.playbackRate.setValueAtTime(option.pitch==73 ? 0.2 : 0.2, start);\r\n            source.playbackRate.linearRampToValueAtTime(option.pitch==73 ? 0.7 : 0.5, start+len);\r\n            gainNode.gain.value = velocity*0.2;\r\n            for (let i=0; i<len*100; i++) {\r\n                gainNode.gain.setValueAtTime(velocity*0.4, start+i/100);\r\n                gainNode.gain.setValueAtTime(velocity*0.9, start+(i+0.7)/100);\r\n            }\r\n            stopAudioTime = len;\r\n            // s\r\n            gainNode2.gain.value = 0;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        }\r\n        case 76: // High Wood Block\r\n        case 77: // Low Wood Block\r\n        {\r\n            // w\r\n            source.playbackRate.value = 0.1;\r\n            gainNode.gain.setValueAtTime(velocity*1.2, start);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.015);\r\n            stopAudioTime = 0.015;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(option.pitch==76 ? 800 : 600, start);\r\n            gainNode2.gain.setValueAtTime(0, start);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*3, start+0.005);\r\n            gainNode2.gain.setTargetAtTime(0, start+0.005, 0.02);\r\n            stopAudioTime2 = 0.2;\r\n            break;\r\n        }\r\n        case 78: // Close Cuica\r\n        case 79: // Open Cuica\r\n        {\r\n            // w\r\n            gainNode.gain.value = 0;\r\n            stopAudioTime = 0;\r\n            // s\r\n            const len = 0.18;\r\n            const f = option.pitch==78 ? 750 : 270;\r\n            oscillator.frequency.setValueAtTime(f, start);\r\n            oscillator.frequency.linearRampToValueAtTime(f, start+len/3);\r\n            if (option.pitch==78) oscillator.frequency.linearRampToValueAtTime(f*0.9, start+len);\r\n            gainNode2.gain.setValueAtTime(0, start);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*1.5, start+0.005);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*0.5, start+0.02);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*3, start+0.04);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*2, start+len/4*3);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+len);\r\n            stopAudioTime2 = len;\r\n            break;\r\n        }\r\n        // GS, GM2\r\n        case 27: // High Q\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(velocity*1, start);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.002);\r\n            stopAudioTime = 0.002;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(1500, start);\r\n            oscillator.frequency.linearRampToValueAtTime(280, start+0.015);\r\n            oscillator.frequency.linearRampToValueAtTime(0, start+0.07);\r\n            gainNode2.gain.setValueAtTime(velocity*1.9, start);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.07);\r\n            stopAudioTime2 = 0.07;\r\n            break;\r\n        }\r\n        case 28: // Slap\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(velocity*1.3, start);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.010);\r\n            gainNode.gain.setValueAtTime(velocity*1.1, start+0.0101);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.020);\r\n            gainNode.gain.setValueAtTime(velocity*0.9, start+0.0201);\r\n            gainNode.gain.setTargetAtTime(0, start+0.0201, 0.03);\r\n            stopAudioTime = 0.2;\r\n            // s\r\n            gainNode2.gain.value = 0;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        }\r\n        case 29: // Scratch Push\r\n        case 30: // Scratch Pull\r\n        {\r\n            const t1 = option.pitch==29 ? 0.05 : 0.07;\r\n            const t2 = option.pitch==29 ? 0.06 : 0.09;\r\n            const t3 = option.pitch==29 ? 0.07 : 0.11;\r\n            const t4 = option.pitch==29 ? 0.1 : 0.15;\r\n            const t5 = option.pitch==29 ? 0.25 : 0.4;\r\n            // w\r\n            const r1 = option.pitch==29 ? 0.1 : 0.06;\r\n            const r2 = option.pitch==29 ? 0.3 : 0.2;\r\n            const r3 = option.pitch==29 ? 0.18 : 0.12;\r\n            source.playbackRate.setValueAtTime(r1, start);\r\n            source.playbackRate.linearRampToValueAtTime(r2, start+t1);\r\n            source.playbackRate.linearRampToValueAtTime(0, start+t2);\r\n            source.playbackRate.linearRampToValueAtTime(r2, start+t3);\r\n            source.playbackRate.linearRampToValueAtTime(r3, start+t4);\r\n            source.playbackRate.linearRampToValueAtTime(0, start+t5);\r\n            gainNode.gain.setValueAtTime(0, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*0.4, start+t1);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*0.1, start+t3);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*0.3, start+t4);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+t5);\r\n            stopAudioTime = t5;\r\n            // s\r\n            const r4 = option.pitch==29 ? 500 : 400;\r\n            const r5 = option.pitch==29 ? 1950 : 1200;\r\n            const r6 = option.pitch==29 ? 430 : 250;\r\n            oscillator.frequency.setValueAtTime(r4, start);\r\n            oscillator.frequency.linearRampToValueAtTime(r5, start+t1);\r\n            oscillator.frequency.linearRampToValueAtTime(0, start+t2);\r\n            oscillator.frequency.linearRampToValueAtTime(r5, start+t3);\r\n            oscillator.frequency.linearRampToValueAtTime(r6, start+t4);\r\n            oscillator.frequency.linearRampToValueAtTime(0, start+t5);\r\n            gainNode2.gain.setValueAtTime(0, start);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*0.7, start+t1);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*0.2, start+t3);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*0.6, start+t4);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+t5);\r\n            stopAudioTime2 = t5;\r\n            break;\r\n        }\r\n        case 31: // Sticks\r\n        {\r\n            // w\r\n            source.playbackRate.setValueAtTime(0.4, start);\r\n            source.playbackRate.linearRampToValueAtTime(0.5, start+0.015);\r\n            gainNode.gain.setValueAtTime(velocity*1.2, start);\r\n            gainNode.gain.setTargetAtTime(0, start, 0.035);\r\n            stopAudioTime = 0.3;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(3140, start);\r\n            gainNode2.gain.setValueAtTime(velocity*1.2, start);\r\n            gainNode2.gain.setTargetAtTime(0, start, 0.012);\r\n            stopAudioTime2 = 0.3;\r\n            break;\r\n        }\r\n        case 32: // Square Click\r\n        {\r\n            // w\r\n            gainNode.gain.value = 0;\r\n            stopAudioTime = 0;\r\n            // s\r\n            oscillator.type = \"square\";\r\n            oscillator.frequency.setValueAtTime(333, start);\r\n            gainNode2.gain.setValueAtTime(0, start);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*4, start+0.0016);\r\n            gainNode2.gain.linearRampToValueAtTime(0, start+0.0032);\r\n            stopAudioTime2 = 0.0032;\r\n            break;\r\n        }\r\n        case 33: // Metronome Click\r\n        case 34: // Metronome Bell\r\n        {\r\n            // w\r\n            source.playbackRate.setValueAtTime(0.17, start);\r\n            source.playbackRate.linearRampToValueAtTime(0.22, start+0.01);\r\n            gainNode.gain.setValueAtTime(velocity*1.5, start);\r\n            gainNode.gain.setTargetAtTime(0, start, 0.015);\r\n            stopAudioTime = 0.3;\r\n            // s\r\n            if (option.pitch==34) {\r\n                oscillator.frequency.setValueAtTime(2040, start);\r\n                gainNode2.gain.setValueAtTime(velocity*1, start);\r\n                gainNode2.gain.setTargetAtTime(0, start, 0.12);\r\n                stopAudioTime2 = 1.1;\r\n            } else {\r\n                gainNode2.gain.value = 0;\r\n                stopAudioTime2 = 0;\r\n            }\r\n            break;\r\n        }\r\n        case 82: // Shaker\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(velocity*0.5, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity, start+0.02);\r\n            gainNode.gain.linearRampToValueAtTime(0, start+0.07);\r\n            stopAudioTime = 0.07;\r\n            // s\r\n            gainNode2.gain.value = 0;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        }\r\n        case 83: // Jingle Bell\r\n        {\r\n            // w\r\n            source.playbackRate.value = 1;\r\n            gainNode.gain.setValueAtTime(0, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*1.2, start+0.015);\r\n            gainNode.gain.setTargetAtTime(0, start+0.015, 0.06);\r\n            stopAudioTime = 0.5;\r\n            // s\r\n            oscillator.type = \"triangle\";\r\n            oscillator.frequency.setValueAtTime(2709, start);\r\n            oscillator.frequency.linearRampToValueAtTime(2657, start+0.3);\r\n            gainNode2.gain.setValueAtTime(0, start);\r\n            gainNode2.gain.linearRampToValueAtTime(velocity*0.7, start+0.025);\r\n            gainNode2.gain.setTargetAtTime(0, start+0.025, 0.07);\r\n            stopAudioTime2 = 0.5;\r\n            break;\r\n        }\r\n        case 84: // Bell Tree\r\n        {\r\n            // w s\r\n            const invert = false;\r\n            source.playbackRate.value = 1;\r\n            for (let i=0; i<28; i++) {\r\n                gainNode.gain.setValueAtTime(velocity*0.1, start+i/24*0.45);\r\n                gainNode.gain.setTargetAtTime(0, start+i/24*0.45, 0.01);\r\n                oscillator.frequency.setValueAtTime(1380*(1+(invert ? (24-i)/24 : i/24)), start+i/24*0.45);\r\n                gainNode2.gain.setValueAtTime(velocity*(0.2+i/24), start+i/24*0.45);\r\n                gainNode2.gain.setTargetAtTime(0, start+i/24*0.45, i==27 ? 0.2 : 0.01);\r\n            }\r\n            stopAudioTime = 0.5;\r\n            stopAudioTime2 = 1.5;\r\n            break;\r\n        }\r\n        case 85: // Castanets\r\n        {\r\n            // w\r\n            source.playbackRate.setValueAtTime(0.35, start);\r\n            gainNode.gain.setValueAtTime(velocity*1.3, start);\r\n            gainNode.gain.setTargetAtTime(0, start, 0.01);\r\n            stopAudioTime = 0.1;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(1730, start);\r\n            gainNode2.gain.setValueAtTime(velocity*0.5, start);\r\n            gainNode2.gain.setTargetAtTime(0, start, 0.01);\r\n            stopAudioTime2 = 0.1;\r\n            break;\r\n        }\r\n        case 86: // Mute Surdo\r\n        case 87: // Open Surdo\r\n        {\r\n            // w\r\n            source.playbackRate.setValueAtTime(0.020, start);\r\n            source.playbackRate.linearRampToValueAtTime(0.015, start+0.5);\r\n            gainNode.gain.setValueAtTime(0, start);\r\n            gainNode.gain.linearRampToValueAtTime(velocity*2, start+0.005);\r\n            gainNode.gain.setTargetAtTime(0, start+0.005, option.pitch==86 ? 0.03 : 0.06);\r\n            stopAudioTime = 0.5;\r\n            // s\r\n            oscillator.frequency.setValueAtTime(88, start);\r\n            oscillator.frequency.linearRampToValueAtTime(86, start+0.3);\r\n            gainNode2.gain.setValueAtTime(velocity*2.5, start);\r\n            gainNode2.gain.setTargetAtTime(0, start, option.pitch==86 ? 0.1 : 0.3);\r\n            stopAudioTime2 = option.pitch==86 ? 0.5 : 1.5;\r\n            break;\r\n        }\r\n\r\n\r\n\r\n        // 新しいパーカッション音源（不採用） //\r\n        //     旧音源と重複するソース //\r\n        //     ESLintエラーが出るため、旧音源と重複するソースをコメントアウト //\r\n\r\n        // // Bass Drum\r\n        // case 35: // Acoustic Bass Drum\r\n        // case 36: // Bass Drum\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.value = 0.25;\r\n        //     gainNode.gain.setValueAtTime(0, start);\r\n        //     gainNode.gain.linearRampToValueAtTime(velocity*0.7, start+0.004);\r\n        //     gainNode.gain.linearRampToValueAtTime(0, start+0.008);\r\n        //     stopAudioTime = 0.008;\r\n        //     // s\r\n        //     oscillator.frequency.setValueAtTime(option.pitch==35 ? 90 : 160, start);\r\n        //     oscillator.frequency.linearRampToValueAtTime(40, start+0.08);\r\n        //     gainNode2.gain.setValueAtTime(0, start);\r\n        //     gainNode2.gain.linearRampToValueAtTime(velocity*3, start+0.02);\r\n        //     gainNode2.gain.linearRampToValueAtTime(0, start+0.08);\r\n        //     stopAudioTime2 = 0.08;\r\n        //     break;\r\n        // }\r\n        // case 38: // Acoustic Snare\r\n        // case 40: // Electric Snare\r\n        // {\r\n        //     const len = option.pitch==38 ? 0.25 : 0.2;\r\n        //     // w\r\n        //     source.playbackRate.value = 0.7;\r\n        //     gainNode.gain.setValueAtTime(velocity, start);\r\n        //     gainNode.gain.linearRampToValueAtTime(0, start+len);\r\n        //     stopAudioTime = len;\r\n        //     // s\r\n        //     oscillator.frequency.setValueAtTime(option.pitch==38 ? 140 : 200, start);\r\n        //     oscillator.frequency.linearRampToValueAtTime(option.pitch==38 ? 100 : 160, start+0.1);\r\n        //     gainNode2.gain.setValueAtTime(velocity*2, start);\r\n        //     gainNode2.gain.linearRampToValueAtTime(0, start+0.1);\r\n        //     stopAudioTime2 = 0.1;\r\n        //     break;\r\n        // }\r\n        // // Toms\r\n        // case 41: // Low Floor Tom\r\n        // case 43: // High Floor Tom\r\n        // case 45: // Low Tom\r\n        // case 47: // Low-Mid Tom\r\n        // case 48: // High-Mid Tom\r\n        // case 50: // High Tom\r\n        // {\r\n        //     const len = option.pitch-41+(option.pitch>=48 ? 1 : 0);\r\n        //     // w\r\n        //     source.playbackRate.value = 0.3+len/45;\r\n        //     gainNode.gain.setValueAtTime(velocity*1.5, start);\r\n        //     gainNode.gain.linearRampToValueAtTime(0, start+0.02);\r\n        //     stopAudioTime = 0.02;\r\n        //     // s\r\n        //     oscillator.frequency.setValueAtTime(90+15*len, start);\r\n        //     oscillator.frequency.linearRampToValueAtTime(30+7.5*len, start+0.5-len/35);\r\n        //     gainNode2.gain.setValueAtTime(velocity*1.5, start);\r\n        //     gainNode2.gain.linearRampToValueAtTime(0, start+0.5-len/35);\r\n        //     stopAudioTime2 = 0.5-len/35;\r\n        //     break;\r\n        // }\r\n        // // Hi-hat\r\n        // case 42: // Closed High-Hat\r\n        // case 44: // Pedal High-Hat\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.value = 1;\r\n        //     if (option.pitch==42) {\r\n        //         gainNode.gain.setValueAtTime(velocity*0.8, start);\r\n        //     }else{\r\n        //         gainNode.gain.setValueAtTime(0, start);\r\n        //         gainNode.gain.linearRampToValueAtTime(velocity*0.8, start+0.014);\r\n        //     }\r\n        //     gainNode.gain.linearRampToValueAtTime(0, start+0.08);\r\n        //     stopAudioTime = 0.08;\r\n        //     // s\r\n        //     gainNode2.gain.value = 0;\r\n        //     stopAudioTime2 = 0;\r\n        //     break;\r\n        // }\r\n        // case 46: // Open Hihat\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.setValueAtTime(0.35, start);\r\n        //     source.playbackRate.linearRampToValueAtTime(0.6, start+0.1);\r\n        //     source.playbackRate.linearRampToValueAtTime(1, start+0.3);\r\n        //     gainNode.gain.setValueAtTime(velocity*1.1, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.3);\r\n        //     stopAudioTime = 1.5;\r\n        //     // s\r\n        //     gainNode2.gain.value = 0;\r\n        //     stopAudioTime2 = 0;\r\n        //     break;\r\n        // }\r\n        // // Cymbal\r\n        // case 49: // Crash Cymbal 1\r\n        // case 57: // Crash Cymbal 2\r\n        // {\r\n        //     // w\r\n        //     const r = option.pitch==49 ? 0.3 : 0.5;\r\n        //     const r2 = option.pitch==49 ? 0.4 : 0.7;\r\n        //     source.playbackRate.setValueAtTime(r, start);\r\n        //     source.playbackRate.linearRampToValueAtTime(r2, start+0.15);\r\n        //     source.playbackRate.linearRampToValueAtTime(0.9, start+0.4);\r\n        //     gainNode.gain.setValueAtTime(velocity*1.3, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.35);\r\n        //     stopAudioTime = 2;\r\n        //     // s\r\n        //     gainNode2.gain.value = 0;\r\n        //     stopAudioTime2 = 0;\r\n        //     break;\r\n        // }\r\n        // case 51: // Ride Cymbal 1\r\n        // case 59: // Ride Cymbal 2\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.value = 1;\r\n        //     gainNode.gain.setValueAtTime(velocity*0.9, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.35);\r\n        //     stopAudioTime = 2;\r\n        //     // s\r\n        //     oscillator.type = \"triangle\";\r\n        //     const f = option.pitch==51 ? 372 : 400;\r\n        //     oscillator.frequency.setValueAtTime(f, start);\r\n        //     gainNode2.gain.setValueAtTime(velocity*0.4, start);\r\n        //     gainNode2.gain.setTargetAtTime(0, start, 0.35);\r\n        //     stopAudioTime2 = 2;\r\n        //     break;\r\n        // }\r\n        // case 52: // Chinese Cymbal\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.setValueAtTime(0.17, start);\r\n        //     source.playbackRate.linearRampToValueAtTime(0.25, start+0.1);\r\n        //     source.playbackRate.linearRampToValueAtTime(0.5, start+0.6);\r\n        //     gainNode.gain.setValueAtTime(velocity*1.3, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.35);\r\n        //     stopAudioTime = 2;\r\n        //     // s\r\n        //     oscillator.type = \"triangle\";\r\n        //     oscillator.frequency.setValueAtTime(382, start);\r\n        //     gainNode2.gain.setValueAtTime(velocity*0.2, start);\r\n        //     gainNode2.gain.setTargetAtTime(0, start, 0.35);\r\n        //     stopAudioTime2 = 2;\r\n        //     break;\r\n        // }\r\n        // case 53: // Ride Bell\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.setValueAtTime(0.6, start);\r\n        //     gainNode.gain.setValueAtTime(velocity, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.3);\r\n        //     stopAudioTime = 2;\r\n        //     // s\r\n        //     oscillator.type = \"triangle\";\r\n        //     oscillator.frequency.setValueAtTime(377, start);\r\n        //     gainNode2.gain.setValueAtTime(velocity*0.5, start);\r\n        //     gainNode2.gain.setTargetAtTime(0, start, 0.35);\r\n        //     stopAudioTime2 = 2;\r\n        //     break;\r\n        // }\r\n        // case 55: // Splash Cymbal\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.setValueAtTime(0.5, start);\r\n        //     source.playbackRate.linearRampToValueAtTime(0.8, start+0.1);\r\n        //     source.playbackRate.linearRampToValueAtTime(1, start+0.6);\r\n        //     gainNode.gain.setValueAtTime(velocity*1.5, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.3);\r\n        //     stopAudioTime = 1.75;\r\n        //     // s\r\n        //     gainNode2.gain.value = 0;\r\n        //     stopAudioTime2 = 0;\r\n        //     break;\r\n        // }\r\n        // case 56: // Cowbell\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.setValueAtTime(1, start);\r\n        //     let v = option.pitch==54 ? 1 : 0.4;\r\n        //     const len = option.pitch==54 ? 0.01 : 0;\r\n        //     gainNode.gain.setValueAtTime(velocity*v/2, start);\r\n        //     gainNode.gain.linearRampToValueAtTime(velocity*v, start+len);\r\n        //     gainNode.gain.setTargetAtTime(0, start+len, 0.05);\r\n        //     stopAudioTime = 0.3;\r\n        //     // s\r\n        //     oscillator.frequency.setValueAtTime(option.pitch==54 ? 6000 : 495, start);\r\n        //     v = option.pitch==54 ? 1 : 2;\r\n        //     gainNode2.gain.setValueAtTime(velocity*v/2, start);\r\n        //     gainNode2.gain.linearRampToValueAtTime(velocity*v, start+len);\r\n        //     gainNode2.gain.setTargetAtTime(0, start+len, 0.05);\r\n        //     stopAudioTime2 = 0.3;\r\n        //     break;\r\n        // }\r\n        // case 80: // Mute Triangle\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.value = 1;\r\n        //     gainNode.gain.setValueAtTime(velocity*0.5, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.015);\r\n        //     stopAudioTime = 0.2;\r\n        //     // s\r\n        //     oscillator.type = \"triangle\";\r\n        //     oscillator.frequency.setValueAtTime(6000, start);\r\n        //     gainNode2.gain.setValueAtTime(velocity*2.5, start);\r\n        //     gainNode2.gain.setTargetAtTime(0, start, 0.02);\r\n        //     stopAudioTime2 = 0.3;\r\n        //     break;\r\n        // }\r\n        // case 81: // Open Triangle\r\n        // {\r\n        //     // w\r\n        //     source.playbackRate.value = 5;\r\n        //     gainNode.gain.setValueAtTime(velocity*0.5, start);\r\n        //     gainNode.gain.setTargetAtTime(0, start, 0.08);\r\n        //     stopAudioTime = 0.75;\r\n        //     // s\r\n        //     oscillator.type = \"triangle\";\r\n        //     oscillator.frequency.setValueAtTime(6000, start);\r\n        //     gainNode2.gain.setValueAtTime(velocity*2.5, start);\r\n        //     gainNode2.gain.setTargetAtTime(0, start, 0.18);\r\n        //     stopAudioTime2 = 1;\r\n        //     break;\r\n        // }\r\n        // // Other Percussion\r\n        // case 60: // High Bongo\r\n        // case 61: // Low Bongo\r\n        // case 62: // Mute High Conga\r\n        // case 63: // Open High Conga\r\n        // case 64: // Low Conga\r\n        // {\r\n        //     const p = option.pitch;\r\n        //     const r = p==60 ? 700 : p==61 ? 282 : p==62 ? 385 : p==63 ? 295 : 210;\r\n        //     const len = p==60 ? 0.08 : p==61 ? 0.1 : p==62 ? 0.03 : p==63 ? 0.12 : 0.15;\r\n        //     // w\r\n        //     source.playbackRate.value = 0.03;\r\n        //     gainNode.gain.setValueAtTime(velocity*1.2, start);\r\n        //     stopAudioTime = 0.03;\r\n        //     // s\r\n        //     oscillator.frequency.setValueAtTime(r*0.97, start);\r\n        //     oscillator.frequency.linearRampToValueAtTime(r, start+len);\r\n        //     gainNode2.gain.setValueAtTime(velocity*1.8, start);\r\n        //     gainNode2.gain.linearRampToValueAtTime(0, start+len);\r\n        //     stopAudioTime2 = len;\r\n        //     break;\r\n        // }\r\n        // case 75: // Claves\r\n        // {\r\n        //     // w\r\n        //     gainNode.gain.value = 0;\r\n        //     stopAudioTime = 0;\r\n        //     // s\r\n        //     oscillator.frequency.setValueAtTime(2181, start);\r\n        //     gainNode2.gain.setValueAtTime(0, start);\r\n        //     gainNode2.gain.setValueAtTime(velocity*2, start+0.005);\r\n        //     gainNode2.gain.linearRampToValueAtTime(velocity*1, start+0.015);\r\n        //     gainNode2.gain.linearRampToValueAtTime(velocity*1.5, start+0.025);\r\n        //     gainNode2.gain.linearRampToValueAtTime(0, start+0.08);\r\n        //     stopAudioTime2 = 0.1;\r\n        //     break;\r\n        // }\r\n\r\n        default: {\r\n            source.playbackRate.value = option.pitch/69*2;\r\n            stopAudioTime = 0.05;\r\n            stopAudioTime2 = 0;\r\n            break;\r\n        }\r\n    }\r\n    // 同じドラムの音が重ならないようにする機能\r\n    // ドラム再生中に次の同じドラムがすぐ鳴る場合、次が鳴る前に止めて音が重ならないようにする（同時発音数の増加を軽減する）\r\n    if (!this.settings.isSameDrumSoundOverlap && nextSameNoteOnInterval != -1) {\r\n        if (stopAudioTime > nextSameNoteOnInterval) {\r\n            stopAudioTime = nextSameNoteOnInterval;\r\n        }\r\n        if (stopAudioTime2 > nextSameNoteOnInterval) {\r\n            stopAudioTime2 = nextSameNoteOnInterval;\r\n        }\r\n    }\r\n    // ドラム音停止時間を設定\r\n    this.stopAudioNode(source, start+stopAudioTime, stopGainNode);\r\n    this.stopAudioNode(oscillator, start+stopAudioTime2, stopGainNode2);\r\n    // ドラム停止時間を設定\r\n    option.drumStopTime = option.startTime + (stopAudioTime >= stopAudioTime2 ? stopAudioTime : stopAudioTime2);\r\n\r\n    // 音をストップさせる関数を返す //\r\n    return () => {\r\n        this.stopAudioNode(source, 0, stopGainNode, true);\r\n        this.stopAudioNode(oscillator, 0, stopGainNode2, true);\r\n    };\r\n}","export default function stopAudioNode(tar, time, stopGainNode, isNoiseCut) {\r\n    const isImmed = time <= this.context.currentTime; // 即時ストップか？\r\n\r\n    // 予約ストップ //\r\n    let vol1Time = time-0.005;\r\n    let stopTime = time;\r\n\r\n    // 時間設定 //\r\n    if (isImmed) { // 即時ストップ\r\n        if (!isNoiseCut) {\r\n            stopTime = this.context.currentTime;\r\n        } else {  // ノイズカット\r\n            vol1Time = this.context.currentTime;\r\n            stopTime = this.context.currentTime+0.005;\r\n        }\r\n    }\r\n\r\n    // 音の停止 //\r\n    try { // 通常の音停止処理\r\n        if (!isNoiseCut) {\r\n            tar.stop(stopTime);\r\n        } else { // ノイズカット（音の終わりに短いフェードアウトを入れる）\r\n            tar.stop(stopTime);\r\n            stopGainNode.gain.cancelScheduledValues(0);\r\n            stopGainNode.gain.setValueAtTime(1, vol1Time);\r\n            stopGainNode.gain.linearRampToValueAtTime(0, stopTime);\r\n        }\r\n    } catch(e) { // iOS用 (stopが２回以上使えないので、代わりにstopGainNodeでミュートにする)\r\n        stopGainNode.gain.cancelScheduledValues(0);\r\n        if (!isNoiseCut) {\r\n            stopGainNode.gain.setValueAtTime(0, stopTime);\r\n        } else { // ノイズカット（音の終わりに短いフェードアウトを入れる）\r\n            stopGainNode.gain.setValueAtTime(1, vol1Time);\r\n            stopGainNode.gain.linearRampToValueAtTime(0, stopTime);\r\n        }\r\n    }\r\n}","export default function pushFunc(tar) {\r\n    if (!tar.note\r\n        && !tar.rootTimeout\r\n        && !tar.pan\r\n        && !this.trigger.isNoteTrigger)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.states.stopFuncs.push(tar);\r\n}","import ArrayUtil from '../../util/array-util.js';\r\n\r\nexport default function clearFunc(tar1, tar2) {\r\n    if (tar1 != \"note\"\r\n        && tar1 != \"rootTimeout\"\r\n        && tar1 != \"pan\"\r\n        && !this.trigger.isNoteTrigger)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.states.stopFuncs.some((n, i, ary) => {\r\n        if (n[tar1] == tar2) {\r\n            ArrayUtil.delete(ary, i); // ary.splice(i, 1); を高速化\r\n            return true;\r\n        }\r\n    });\r\n}","/**\r\n * tickからtime(秒)を求める\r\n * @param {number} tick\r\n * @returns {number} time(秒)\r\n */\r\nexport default function getTime(tick) {\r\n    let imid = -1;\r\n\r\n    // tempo変更がある場合、tickを検索する //\r\n    if (this.tempoTrack && this.tempoTrack.length >= 1) {\r\n        // 最後のtickを超える場合、最後のtimeを返す //\r\n        if (tick >= this.tempoTrack[this.tempoTrack.length-1].timing) {\r\n            return this.tempoTrack[this.tempoTrack.length-1].time;\r\n        }\r\n        // 二分探索でtickを探す //\r\n        let imin = 0;\r\n        let imax = this.tempoTrack.length - 1;\r\n        while (true) {\r\n            imid = Math.floor(imin + (imax - imin) / 2);\r\n            const tempTiming = this.tempoTrack[imid].timing;\r\n            if (tick < tempTiming) {\r\n                imax = imid - 1;\r\n            } else if (tick > tempTiming) {\r\n                imin = imid + 1;\r\n            } else {\r\n                break;\r\n            }\r\n            if (imin > imax) {\r\n                if (tick < tempTiming) imid--;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    let time = 0;\r\n    let baseTiming = 0;\r\n    let tempo = 120;\r\n    if (imid >= 0) { // tickを探索して見つかった場合\r\n        // 引数tickに一番近いtickを取得\r\n        const tempoObj = this.tempoTrack[imid];\r\n        time = tempoObj.time;\r\n        baseTiming = tempoObj.timing;\r\n        tempo = tempoObj.value;\r\n    }\r\n\r\n    // tickからtimeを算出する\r\n    // 引数tickに一番近いtickのtime ＋ 引数tickから残りのtimeを算出 ＝ 現在のtime\r\n    time += (60 / tempo / this.settings.resolution) * (tick - baseTiming);\r\n    return time;\r\n}","/**\r\n * time(秒)からtickを求める\r\n * @param {number} time\r\n * @returns {number} tick\r\n */\r\nexport default function getTiming(time) {\r\n    let imid = -1;\r\n\r\n    // tempo変更がある場合、timeを検索する //\r\n    if (this.tempoTrack && this.tempoTrack.length >= 1) {\r\n        // 最後のtimeを超える場合、最後のtickを返す\r\n        if (time >= this.tempoTrack[this.tempoTrack.length-1].time) {\r\n            return this.tempoTrack[this.tempoTrack.length-1].timing;\r\n        }\r\n        // 二分探索でtimeを探す\r\n        let imin = 0;\r\n        let imax = this.tempoTrack.length - 1;\r\n        while (true) {\r\n            imid = Math.floor(imin + (imax - imin) / 2);\r\n            const tempTime = this.tempoTrack[imid].time;\r\n            if (time < tempTime) {\r\n                imax = imid - 1;\r\n            } else if (time > tempTime) {\r\n                imin = imid + 1;\r\n            } else {\r\n                break;\r\n            }\r\n            if (imin > imax) {\r\n                if (time < tempTime) imid--;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    let baseTime = 0;\r\n    let tick = 0;\r\n    let tempo = 120;\r\n    if (imid >= 0) { // timeを探索して見つかった場合\r\n        // 引数timeに一番近いtimeを取得\r\n        const tempoObj = this.tempoTrack[imid];\r\n        baseTime = tempoObj.time;\r\n        tick = tempoObj.timing;\r\n        tempo = tempoObj.value;\r\n    }\r\n\r\n    // timeからtickを算出する\r\n    // 引数timeに一番近いtimeのtick ＋ 現在timeから残りのtickを算出 ＝ 現在のtick\r\n    tick += (time - baseTime) / (60 / tempo / this.settings.resolution);\r\n    return tick;\r\n}","import ParseUtil from '../../util/parse-util.js';\r\n\r\nexport default function parseHeader(info) {\r\n    // 関数呼び出し元からデータをもらう //\r\n    const smf = info.smf;\r\n\r\n    // SMFのヘッダチャンクを解析 //\r\n    let p = 4; \r\n    const header = {};\r\n    header.size = ParseUtil.getInt(smf, 4, 8);\r\n    header.format = smf[9];\r\n    header.trackcount = ParseUtil.getInt(smf, 10, 12);\r\n    header.timemanage = smf[12];\r\n    header.resolution = ParseUtil.getInt(smf, 12, 14); // TODO 0除算防止。15bit目1のとき、https://sites.google.com/site/yyagisite/material/smfspec#ConductorTrack\r\n    p += 4 + header.size;\r\n\r\n    // 変数を用意 //\r\n    const channels = [];\r\n    const chSize = this.settings.isWebMIDI ? 17 : 16; // WebMIDI用に17chに全てのイベントを入れるため17ch分作る\r\n    for (let i=0; i<chSize; i++) {\r\n        const channel = {};\r\n        channels.push(channel);\r\n        // smfを読む順番を記録した索引配列を作る //\r\n        // 型付き配列をリスト構造の配列のように使う（リスト構造にすることで挿入処理を高速化する）\r\n        // [tick, smfMesLength, smfPtr, nextIndicesPtr, ...]\r\n        channel.indices = [];\r\n        channel.indicesLength = 0;\r\n        channel.indicesHead = -1; // 先頭のポインタ\r\n        channel.indicesFoot = 0; // 末尾のポインタ\r\n        channel.indicesCur = 0; // 現在のinsert用ポインタ\r\n        channel.indicesPre = 0; // 前回のinsert用ポインタ\r\n        channel.notes = [];\r\n    }\r\n\r\n    // 関数呼び出し元にデータを返す //\r\n    info.p = p;\r\n    info.header = header;\r\n    info.channels = channels;\r\n    return info;\r\n}","import ParseUtil from '../../util/parse-util.js';\r\n\r\nexport default function parseTrack(info) {\r\n    // 関数呼び出し元からデータをもらう //\r\n    const smf = info.smf;\r\n    let p = info.p;\r\n    const header = info.header;\r\n    const channels = info.channels;\r\n\r\n    // SMFのトラックチャンクの解析・\"SMF読み込み順序配列\"を作成 //\r\n    //   全トラックを解析しながら、SMFを読む順番を記録した配列を作成する\r\n    //   読み込む順番は、この解析でデルタタイム順になるようソートしておく\r\n    //   SMFのMIDIイベント解析時は、上記配列から「次はMIDIファイルの何バイト目を見るか」を取得して解析する\r\n    //   上記配列はリスト構造の配列のように使う（リスト構造にすることで配列のinsert処理を高速化する）\r\n    // \r\n    // ■配列イメージ（json風）■\r\n    // [\r\n    //     {\r\n    //         tick : このMIDIイベントのTick,\r\n    //         smfMesLength : １つのMIDIイベントの長さ,\r\n    //         smfPtr : このMIDIイベントはMIDIファイルの何バイト目にあるか,\r\n    //         nextIndicesPtr : 次のオブジェクトはリスト配列の何番目にあるか\r\n    //     },\r\n    //     ...\r\n    // ]\r\n    // \r\n    // ■実際の配列イメージ■\r\n    // [tick, smfMesLength, smfPtr, nextIndicesPtr, ...]\r\n\r\n    const tempoTrack = [];\r\n    const beatTrack = [];\r\n    let songLength = 0;\r\n    for (let t=0; t<header.trackcount; t++) {\r\n        // \"MTrk\"\r\n        if (smf[p] != 77 || smf[p+1] != 84 || smf[p+2] != 114 || smf[p+3] != 107)\r\n            return \"Irregular SMF.\";\r\n        p += 4;\r\n        const endPoint = p + 4 + ParseUtil.getInt(smf, p, p+4);\r\n        p += 4;\r\n        let tick = 0;\r\n        let tempo = 120;\r\n        let tempoCurTick = 0;\r\n        let tempoCurTime = 0;\r\n        let lastState = 1;\r\n        let dt;\r\n        while (p<endPoint) {\r\n            // DeltaTime\r\n            if (lastState != null) {\r\n                const lengthAry = ParseUtil.variableLengthToInt(smf, p, p+5);\r\n                dt = lengthAry[0];\r\n                tick += dt;\r\n                p += lengthAry[1];\r\n            }\r\n            const cashP = p; // WebMIDI用\r\n            // Events\r\n            const mes0 = smf[p] >> 4; // Math.floor(smf[p] / 0x10)\r\n            switch (mes0) {\r\n                case 0x8: // Note OFF - 8[ch], Pitch, Velocity\r\n                case 0x9: // Note ON - 9[ch], Pitch, Velocity\r\n                case 0xA: // Polyfonic Key Pressure - A[ch], Pitch?, Velocity?\r\n                case 0xB: // Control Change - B[ch],,\r\n                case 0xE: // PitchBend Change - E[ch],,\r\n                {\r\n                    // チャンネル毎に仕分けた後に解析する\r\n                    lastState = smf[p];\r\n                    const ch = channels[lastState&0x0F];\r\n                    ParseUtil.chIndicesInsert(this, ch, tick, p, 3);\r\n                    p += 3;\r\n                    break;\r\n                }\r\n                case 0xC: // Program Change - C[ch],\r\n                case 0xD: // Channel Pre - D[ch],\r\n                {\r\n                    // チャンネル毎に仕分けた後に解析する\r\n                    lastState = smf[p];\r\n                    const ch = channels[lastState&0x0F];\r\n                    ParseUtil.chIndicesInsert(this, ch, tick, p, 2);\r\n                    p += 2;\r\n                    break;\r\n                }\r\n                // SysEx Events or Meta Events - F[ch], ...\r\n                case 0xF: {\r\n                    //lastState = smf[p]; <- ランニングステートは無い\r\n                    switch (smf[p]) {\r\n                        case 0xF0:\r\n                        case 0xF7: {\r\n                            // SysEx Events\r\n                            const lengthAry = ParseUtil.variableLengthToInt(smf, p+1, p+1+4);\r\n\r\n                            // Master Volume\r\n                            // 0xF0, size, 0x7f, 0x7f, 0x04, 0x01, 0xNN, volume, 0xF7\r\n                            if (lengthAry[0] >= 7\r\n                                && smf[p+2] == 0x7f\r\n                                && smf[p+3] == 0x7f\r\n                                && smf[p+4] == 0x04\r\n                                && smf[p+5] == 0x01) {\r\n                                // 全チャンネルにMasterVolumeイベントを挿入する\r\n                                for (let i=0; i<16; i++) {\r\n                                    const ch = channels[i];\r\n                                    ParseUtil.chIndicesInsert(this, ch, tick, p, lengthAry[0]);\r\n                                }\r\n                            }\r\n\r\n                            p += 1 + lengthAry[1] + lengthAry[0];\r\n                            break;\r\n                        }\r\n                        case 0xF1:\r\n                            p += 2;\r\n                            break;\r\n                        case 0xF2:\r\n                            p += 3;\r\n                            break;\r\n                        case 0xF3:\r\n                            p += 2;\r\n                            break;\r\n                        case 0xF6:\r\n                        case 0xF8:\r\n                        case 0xFA:\r\n                        case 0xFB:\r\n                        case 0xFC:\r\n                        case 0xFE:\r\n                            p += 1;\r\n                            break;\r\n                        case 0xFF: {\r\n                            // Meta Events\r\n                            switch (smf[p+1]) {\r\n                                case 0x00:\r\n                                case 0x01:\r\n                                case 0x02:\r\n                                case 0x03:\r\n                                case 0x04:\r\n                                case 0x05:\r\n                                case 0x06:\r\n                                case 0x07:\r\n                                case 0x20:\r\n                                    break;\r\n                                case 0x2F:\r\n                                    tick += (this.settings.isSkipEnding ? 0 : header.resolution) - dt;\r\n                                    break;\r\n                                case 0x51: // Tempo\r\n                                    // 全チャンネルにTempoイベントを挿入する\r\n                                    for (let i=0; i<16; i++) {\r\n                                        const ch = channels[i];\r\n                                        ParseUtil.chIndicesInsert(this, ch, tick, p, 6);\r\n                                    }\r\n                                    tempoCurTime += (60 / tempo / header.resolution) * (tick - tempoCurTick);\r\n                                    tempoCurTick = tick;\r\n                                    tempo = 60000000/(smf[p+3]*0x10000 + smf[p+4]*0x100 + smf[p+5]);\r\n                                    tempoTrack.push({\r\n                                        timing: tick,\r\n                                        time: tempoCurTime,\r\n                                        value: tempo\r\n                                    });\r\n                                    break;\r\n                                case 0x54:\r\n                                    break;\r\n                                case 0x58: // Beat\r\n                                    beatTrack.push({\r\n                                        timing: tick,\r\n                                        value: [smf[p+3], Math.pow(2, smf[p+4])]\r\n                                    });\r\n                                    break;\r\n                                case 0x59:\r\n                                case 0x7F:\r\n                                    break;\r\n                            }\r\n                            const lengthAry = ParseUtil.variableLengthToInt(smf, p+2, p+2+4);\r\n                            p += 2 + lengthAry[1] + lengthAry[0];\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    if (lastState == null)\r\n                        return \"Irregular SMF. (\" + p + \" byte addr)\";\r\n                    p--;\r\n                    smf[p] = lastState; // 上書き\r\n                    lastState = null;\r\n                }\r\n            }\r\n            // WebMIDIAPI\r\n            if (this.settings.isWebMIDI) {\r\n                if (lastState != null) {\r\n                    // WebMIDI用に17chに全てのMIDIイベントを入れる\r\n                    ParseUtil.chIndicesInsert(this, channels[16], tick, cashP, p - cashP);\r\n                }\r\n            }\r\n        }\r\n        if (!this.settings.isSkipEnding && songLength < tick) songLength = tick;\r\n        // リスト配列のポインタを初期化\r\n        for (let i=0; i<channels.length; i++) {\r\n            channels[i].indicesCur = channels[i].indicesHead;\r\n            channels[i].indicesPre = channels[i].indicesHead;\r\n        }\r\n    }\r\n\r\n    // 関数呼び出し元にデータを返す //\r\n    info.p = p;\r\n    info.tempoTrack = tempoTrack;\r\n    info.beatTrack = beatTrack;\r\n    info.songLength = songLength;\r\n    return info;\r\n}\r\n","import ArrayUtil from '../../util/array-util.js';\r\nimport {Number} from '../../util/ponyfill.js';\r\n\r\nexport default function parseEvent(info) {\r\n    // 関数呼び出し元からデータをもらう //\r\n    const smf = info.smf;\r\n    const header = info.header;\r\n    const channels = info.channels;\r\n    const tempoTrack = info.tempoTrack;\r\n    let songLength = info.songLength;\r\n\r\n    // SMFのMIDIイベント解析 //\r\n    let tempo;\r\n    let tempoCurTick;\r\n    let tempoCurTime;\r\n    let cc111Tick = -1;\r\n    let cc111Time = -1;\r\n    let firstNoteOnTiming = Number.MAX_SAFE_INTEGER(); // 最初のノートオンのTick\r\n    let firstNoteOnTime = Number.MAX_SAFE_INTEGER();\r\n    let lastNoteOffTiming = 0; // 最後のノートオフのTick\r\n    let lastNoteOffTime = 0;\r\n\r\n    // Midi Events (0x8n - 0xEn) parse\r\n    for (let ch=0; ch<16; ch++) {\r\n        const channel = channels[ch];\r\n        let dataEntry = 2;\r\n        let pitchBend = 0;\r\n        let pan = 64;\r\n        let expression = 127;\r\n        let velocity = 100;\r\n        let modulation = 0;\r\n        let hold = 0;\r\n        let reverb = this.settings.initReverb;\r\n        let chorus = 0;\r\n        let nrpnLsb = 127;\r\n        let nrpnMsb = 127;\r\n        let rpnLsb = 127;\r\n        let rpnMsb = 127;\r\n        let instrument = 0;\r\n        let masterVolume = 127;\r\n        tempo = 120;\r\n        tempoCurTick = 0;\r\n        tempoCurTime = 0;\r\n        const nowNoteOnIdxAry = [];\r\n        let indIdx = channel.indicesHead;\r\n        const indices = channel.indices;\r\n        const nextNoteOnAry = new Array(128);\r\n        while (indIdx != -1) {\r\n            const tick = indices[indIdx];\r\n            const p = indices[indIdx+2];\r\n            const nextIdx = indices[indIdx+3];\r\n            const time = (60 / tempo / header.resolution) * (tick - tempoCurTick) + tempoCurTime;\r\n\r\n            // Events\r\n            const mes0 = smf[p] >> 4; // Math.floor(smf[p] / 0x10)\r\n            switch (mes0) {\r\n                case 0x8: // Note OFF - 8[ch], Pitch, Velocity\r\n                case 0x9: // Note ON - 9[ch], Pitch, Velocity\r\n                    if (mes0 == 0x9 && smf[p+2] != 0) { // ノートオン\r\n                        // ノート情報が入ったオブジェクトを作成 //\r\n                        const note = {\r\n                            start: tick,\r\n                            stop: null,\r\n                            startTime: time,\r\n                            stopTime: null,\r\n                            pitch: smf[p+1],\r\n                            pitchBend: [{timing:tick,time:time,value:pitchBend}],\r\n                            pan: [{timing:tick,time:time,value:pan}],\r\n                            expression: [{timing:tick,time:time,value:expression*(masterVolume/127)}],\r\n                            velocity: (smf[p+2]/127)*(velocity/127),\r\n                            modulation: [{timing:tick,time:time,value:modulation}],\r\n                            holdBeforeStop: null,\r\n                            reverb: [{timing:tick,time:time,value:reverb}],\r\n                            chorus: [{timing:tick,time:time,value:chorus}],\r\n                            instrument: instrument,\r\n                            channel: ch,\r\n                            nextSameNoteOnInterval: -1,\r\n                            drumStopTime: 2 // 再生時に使う\r\n                        };\r\n\r\n                        // 前回鳴っていた同音ノートに次のノートオン時間を入れる //\r\n                        // 同音ノートを二重再生したくない場合のために記録する //\r\n                        const prevNote = nextNoteOnAry[smf[p+1]];\r\n                        if (prevNote) {\r\n                            prevNote.nextSameNoteOnInterval = time - prevNote.startTime;\r\n                        }\r\n                        nextNoteOnAry[smf[p+1]] = note;\r\n\r\n                        // 同音ノートがノートオン中の場合、ノートオフにする //\r\n                        nowNoteOnIdxAry.some((idx,i) => {\r\n                            const note = channel.notes[idx];\r\n                            if (note.pitch == smf[p+1] && note.stop==null) {\r\n                                note.stop = tick;\r\n                                note.stopTime = time;\r\n                                ArrayUtil.delete(nowNoteOnIdxAry, i); // nowNoteOnIdxAry.splice(i, 1); を軽量化\r\n                            }\r\n                        });\r\n\r\n                        // ノートオン中配列に入れる\r\n                        nowNoteOnIdxAry.push(channel.notes.length);\r\n                        // notes一覧にnoteオブジェクトを入れる\r\n                        channel.notes.push(note);\r\n\r\n                        // 最初のノートオン時間を記録 //\r\n                        if (tick < firstNoteOnTiming) {\r\n                            firstNoteOnTiming = tick;\r\n                            firstNoteOnTime = time;\r\n                        }\r\n                    } else { // ノートオフ\r\n                        // ノートオン中配列から該当ノートを探し、ノートオフ処理をする //\r\n                        nowNoteOnIdxAry.some((idx, i) => {\r\n                            const note = channel.notes[idx];\r\n                            if (note.pitch == smf[p+1] && note.stop == null) {\r\n                                if (hold >= this.settings.holdOnValue) { // ホールドが効いている場合\r\n                                    if (note.holdBeforeStop == null) {\r\n                                        note.holdBeforeStop = [{\r\n                                            timing: tick,\r\n                                            time: time,\r\n                                            value: hold\r\n                                        }];\r\n                                    }\r\n                                } else { // ホールドしていない場合\r\n                                    note.stop = tick;\r\n                                    note.stopTime = time;\r\n                                    ArrayUtil.delete(nowNoteOnIdxAry, i); // nowNoteOnIdxAry.splice(i, 1); を軽量化\r\n                                }\r\n\r\n                                // 最後のノートオフ時間を記録 //\r\n                                if (tick > lastNoteOffTiming) {\r\n                                    lastNoteOffTiming = tick;\r\n                                    lastNoteOffTime = time;\r\n                                }\r\n                                return true;\r\n                            }\r\n                        });\r\n                    }\r\n                    break;\r\n                // Polyfonic Key Pressure - A[ch], Pitch?, Velocity?\r\n                case 0xA:\r\n                    break;\r\n                // Control Change - B[ch],,\r\n                case 0xB:\r\n                    switch (smf[p+1]) {\r\n                        case 1:\r\n                            // modulation\r\n                            modulation = smf[p+2];\r\n                            nowNoteOnIdxAry.forEach((idx) => {\r\n                                const note = channel.notes[idx];\r\n                                note.modulation.push({\r\n                                    timing: tick,\r\n                                    time: time,\r\n                                    value: modulation\r\n                                });\r\n                            });\r\n                            break;\r\n                        case 6:\r\n                            if (rpnLsb==0 && rpnMsb==0) {\r\n                                // RLSB=0 & RMSB=0 -> 6はピッチ\r\n                                dataEntry = smf[p+2];\r\n                                if (dataEntry > 24) {\r\n                                    dataEntry = 24;\r\n                                }\r\n                            }\r\n                            if (nrpnLsb==8 && nrpnMsb==1) {\r\n                                // (保留)ビブラート・レイト(GM2/GS/XG)\r\n                                //console.log(\"CC  8 1 6 \"+smf[p+2]+\" tick:\"+tick);\r\n                            } else if (nrpnLsb==9 && nrpnMsb==1) {\r\n                                // (保留)ビブラート・デプス(GM2/GS/XG)\r\n                                //console.log(\"CC  9 1 6 \"+smf[p+2]+\" tick:\"+tick);\r\n                            } else if (nrpnLsb==10 && nrpnMsb==1) {\r\n                                // (保留)ビブラート・ディレイ(GM2/GS/XG)\r\n                                //console.log(\"CC 10 1 6 \"+smf[p+2]+\" tick:\"+tick);\r\n                            }\r\n                            break;\r\n                        case 7: \r\n                            velocity = smf[p+2];\r\n                            break;\r\n                        case 10: // Pan\r\n                            pan = smf[p+2];\r\n                            nowNoteOnIdxAry.forEach((idx) => {\r\n                                const note = channel.notes[idx];\r\n                                note.pan.push({\r\n                                    timing: tick,\r\n                                    time: time,\r\n                                    value: pan\r\n                                });\r\n                            });\r\n                            break;\r\n                        case 11: // Expression\r\n                            expression = smf[p+2];\r\n                            nowNoteOnIdxAry.forEach((idx) => {\r\n                                const note = channel.notes[idx];\r\n                                note.expression.push({\r\n                                    timing: tick,\r\n                                    time: time,\r\n                                    value: expression*(masterVolume/127)\r\n                                });\r\n                            });\r\n                            break;\r\n                        case 64: // Hold1\r\n                            hold = smf[p+2];\r\n                            if (hold < this.settings.holdOnValue) {\r\n                                for (let i=nowNoteOnIdxAry.length-1; i>=0; i--) {\r\n                                    const idx = nowNoteOnIdxAry[i];\r\n                                    const note = channel.notes[idx];\r\n                                    if (note.stop == null && note.holdBeforeStop != null) {\r\n                                        note.stop = tick;\r\n                                        note.stopTime = time;\r\n                                        ArrayUtil.delete(nowNoteOnIdxAry, i); // nowNoteOnIdxAry.splice(i, 1); を軽量化\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 91: // reverb\r\n                            reverb = smf[p+2];\r\n                            nowNoteOnIdxAry.forEach((idx) => {\r\n                                const note = channel.notes[idx];\r\n                                note.reverb.push({\r\n                                    timing: tick,\r\n                                    time: time,\r\n                                    value: reverb\r\n                                });\r\n                            });\r\n                            break;\r\n                        case 93: // chorus\r\n                            chorus = smf[p+2];\r\n                            nowNoteOnIdxAry.forEach((idx) => {\r\n                                const note = channel.notes[idx];\r\n                                note.chorus.push({\r\n                                    timing: tick,\r\n                                    time: time,\r\n                                    value: chorus\r\n                                });\r\n                            });\r\n                            break;\r\n                        case 98:\r\n                            nrpnLsb = smf[p+2];\r\n                            break;\r\n                        case 99:\r\n                            nrpnMsb = smf[p+2];\r\n                            break;\r\n                        case 100:\r\n                            rpnLsb = smf[p+2];\r\n                            break;\r\n                        case 101:\r\n                            rpnMsb = smf[p+2];\r\n                            break;\r\n                        case 111: // RPGツクール用ループ(CC111)\r\n                            if (cc111Tick == -1) {\r\n                                cc111Tick = tick;\r\n                                cc111Time = time;\r\n                            }\r\n                            break;\r\n                    }\r\n                    break;\r\n                // Program Change - C[ch],\r\n                case 0xC:\r\n                    instrument = smf[p+1];\r\n                    break;\r\n                // Channel Pre - D[ch],\r\n                case 0xD:\r\n                    break;\r\n                // PitchBend Change - E[ch],,\r\n                case 0xE:\r\n                    pitchBend = ((smf[p+2]*128+smf[p+1])-8192)/8192*dataEntry;\r\n                    nowNoteOnIdxAry.forEach((idx) => {\r\n                        const note = channel.notes[idx];\r\n                        note.pitchBend.push({\r\n                            timing: tick,\r\n                            time: time,\r\n                            value: pitchBend\r\n                        });\r\n                    });\r\n                    break;\r\n                case 0xF:\r\n                    //lastState = smf[p]; <- ランニングステートは無い\r\n                    switch (smf[p]) {\r\n                        case 0xF0:\r\n                        case 0xF7:\r\n                            // Master Volume\r\n                            if (smf[p+1]==0x7f && smf[p+2]==0x7f && smf[p+3]==0x04 && smf[p+4]==0x01) {\r\n                                let vol = smf[p+6];\r\n                                if (vol > 127) vol = 127;\r\n                                masterVolume = vol;\r\n                                nowNoteOnIdxAry.forEach((idx) => {\r\n                                    const note = channel.notes[idx];\r\n                                    note.expression.push({\r\n                                        timing: tick,\r\n                                        time: time,\r\n                                        value: expression*(masterVolume/127)\r\n                                    });\r\n                                });\r\n                            }\r\n                            break;\r\n                        case 0xFF:\r\n                            // Meta Events\r\n                            switch (smf[p+1]) {\r\n                                case 0x51:\r\n                                    // Tempo\r\n                                    tempoCurTime += (60 / tempo / header.resolution) * (tick - tempoCurTick);\r\n                                    tempoCurTick = tick;\r\n                                    tempo = 60000000/(smf[p+3]*0x10000 + smf[p+4]*0x100 + smf[p+5]);\r\n                                    break;\r\n                            }\r\n                        break;\r\n                    }\r\n                    break;\r\n                default: {\r\n                    return \"Error parseSMF. \";\r\n                }\r\n            }\r\n            indIdx = nextIdx;\r\n        }\r\n        channel.nowNoteOnIdxAry = nowNoteOnIdxAry;\r\n        if (!this.debug) {\r\n            delete channel.indices;\r\n        }\r\n    }\r\n\r\n    // ホールドが効いてノートオンのままになったノートをノートオフする //\r\n    for (let ch=0; ch<16; ch++) {\r\n        const channel = channels[ch];\r\n        const nowNoteOnIdxAry = channel.nowNoteOnIdxAry;\r\n        for (let i=nowNoteOnIdxAry.length-1; i>=0; i--) {\r\n            const note = channel.notes[nowNoteOnIdxAry[i]];\r\n            if (note.stop==null) {\r\n                note.stop = lastNoteOffTiming;\r\n                note.stopTime = lastNoteOffTime;\r\n                // If (note.cc[x].timing > lastNoteOffTiming), delete note.cc[x]\r\n                const nameAry = [\"pitchBend\", \"pan\", \"expression\", \"modulation\", \"reverb\", \"chorus\"];\r\n                nameAry.forEach((name) => {\r\n                    const ccAry = note[name];\r\n                    for (let i2=ccAry.length-1; i2>=1; i2--) {\r\n                        const obj = ccAry[i2];\r\n                        if (obj.timing>lastNoteOffTiming) {\r\n                            ArrayUtil.delete(ccAry, i2); // ccAry.splice(i2, 1); を軽量化\r\n                        }\r\n                    }\r\n                });\r\n                ArrayUtil.delete(nowNoteOnIdxAry, i); // nowNoteOnIdxAry.splice(i, 1); を軽量化\r\n            }\r\n        }\r\n        delete channel.nowNoteOnIdxAry;\r\n    }\r\n    if (this.settings.isSkipEnding) songLength = lastNoteOffTiming;\r\n    tempoTrack.push({ timing:songLength, time:(60 / tempo / header.resolution) * (songLength - tempoCurTick) + tempoCurTime, value:120 });\r\n\r\n    // WebMIDI用のMIDIメッセージを作成 //\r\n    const messages = [];\r\n    if (this.settings.isWebMIDI) {\r\n        const channel = channels[16];\r\n        let tempo = 120;\r\n        let tempoCurTick = 0;\r\n        let tempoCurTime = 0;\r\n        let indIdx = channel.indicesHead;\r\n        const indices = channel.indices;\r\n        while (indIdx != -1) {\r\n            const tick = indices[indIdx];\r\n            const pLen = indices[indIdx+1];\r\n            const p = indices[indIdx+2];\r\n            const nextIdx = indices[indIdx+3];\r\n            const time = (60 / tempo / header.resolution) * (tick - tempoCurTick) + tempoCurTime;\r\n            // Events\r\n            switch (smf[p]) {\r\n                case 0xFF:\r\n                // Meta Events\r\n                switch (smf[p+1]) {\r\n                    case 0x51:\r\n                        // Tempo\r\n                        tempoCurTime += (60 / tempo / header.resolution) * (tick - tempoCurTick);\r\n                        tempoCurTick = tick;\r\n                        tempo = 60000000/(smf[p+3]*0x10000 + smf[p+4]*0x100 + smf[p+5]);\r\n                        break;\r\n                }\r\n            }\r\n            messages.push({time:time, tick:tick, smfPtr:p, smfPtrLen:pLen});\r\n            indIdx = nextIdx;\r\n        }\r\n    }\r\n\r\n    // 関数呼び出し元にデータを返す //\r\n    info.songLength = songLength;\r\n    info.cc111Tick = cc111Tick;\r\n    info.cc111Time = cc111Time;\r\n    info.firstNoteOnTiming = firstNoteOnTiming;\r\n    info.firstNoteOnTime = firstNoteOnTime;\r\n    info.lastNoteOffTiming = lastNoteOffTiming;\r\n    info.lastNoteOffTime = lastNoteOffTime;\r\n    if (this.settings.isWebMIDI) {\r\n        info.messages = messages;\r\n        info.smfData = new Uint8Array(smf); // lastStateを上書きしたsmfをコピー\r\n    }\r\n\r\n    return info;\r\n}","import parseHeader from './parse-smf/parse-header.js';\r\nimport parseTrack from './parse-smf/parse-track.js';\r\nimport parseEvent from './parse-smf/parse-event.js';\r\nimport {Performance} from '../util/ponyfill.js';\r\n\r\nexport default function parseSMF(_smf) {\r\n    if (this.debug) {\r\n        console.log(_smf);\r\n        var syoriTimeS1 = Performance.now();\r\n    }\r\n\r\n    // smf配列はデータ上書きするので_smfをディープコピーする\r\n    const smf = new Uint8Array(_smf);\r\n\r\n    // SMFのフォーマットかどうかチェック //\r\n    // \"MThd\"\r\n    if (smf[0] != 77 || smf[1] != 84 || smf[2] != 104 || smf[3] != 100)\r\n        return \"Not Sandard MIDI File.\";\r\n\r\n    // 関数間でデータをやり取りするためのObject //\r\n    const info = {};\r\n    info.smf = smf;\r\n    \r\n    // ヘッダー解析 //\r\n    parseHeader.call(this, info);\r\n    if (this.debug) {\r\n        var syoriTimeS2 = Performance.now();\r\n    }\r\n\r\n    // トラック解析 //\r\n    parseTrack.call(this, info);\r\n    if (this.debug) {\r\n        var syoriTimeS3 = Performance.now();\r\n    }\r\n\r\n    // MIDIイベント解析 //\r\n    parseEvent.call(this, info);\r\n\r\n    // return用のオブジェクトに情報を代入 //\r\n    const data = {};\r\n    data.header = info.header;\r\n    data.tempoTrack = info.tempoTrack;\r\n    data.beatTrack = info.beatTrack;\r\n    data.channels = info.channels;\r\n    data.songLength = info.songLength;\r\n    data.cc111Tick = info.cc111Tick;\r\n    data.cc111Time = info.cc111Time;\r\n    data.firstNoteOnTiming = info.firstNoteOnTiming;\r\n    data.firstNoteOnTime = info.firstNoteOnTime;\r\n    data.lastNoteOffTiming = info.lastNoteOffTiming;\r\n    data.lastNoteOffTime = info.lastNoteOffTime;\r\n    if (this.settings.isWebMIDI) {\r\n        data.messages = info.messages;\r\n        data.smfData = new Uint8Array(smf); // lastStateを上書きしたsmfをコピー\r\n    }\r\n\r\n    if (this.debug) {\r\n        const syoriTimeE = Performance.now();\r\n        console.log(\"parseSMF time\", syoriTimeE - syoriTimeS1);\r\n        console.log(\"parseSMF(0/2) time\", syoriTimeS2 - syoriTimeS1);\r\n        console.log(\"parseSMF(1/2) time\", syoriTimeS3 - syoriTimeS2);\r\n        console.log(\"parseSMF(2/2) time\", syoriTimeE - syoriTimeS3);\r\n        console.log(data);\r\n    }\r\n    return data;\r\n}","export default function startWebMIDI() {\r\n    if (!navigator.requestMIDIAccess) return;\r\n    // 1回目：ブラウザにMIDIデバイスのフルコントロールを要求する(SysExの使用を要求)\r\n    // 2回目：MIDIデバイスのフルコントロールがブロックされたら、SysEx無しでMIDIアクセスを要求する\r\n    let sysEx = this.settings.WebMIDIPortSysEx;\r\n    const midiAccessSuccess = (midiAccess) => {\r\n        const outputs = midiAccess.outputs;\r\n        this.settings.WebMIDIPortOutputs = outputs;\r\n        let output;\r\n        if (this.settings.WebMIDIPort==-1) {\r\n            this.settings.WebMIDIPortOutputs.forEach((o) => {\r\n                if (!output) output = o;\r\n            });\r\n        } else {\r\n            output = this.settings.WebMIDIPortOutputs.get(this.settings.WebMIDIPort);\r\n        }\r\n        this.settings.WebMIDIPortOutput = output;\r\n        this.settings.WebMIDIPortSysEx = sysEx;\r\n        if (output) {\r\n            output.open();\r\n            this.initStatus(); // リセットイベント（GMシステム・オン等）を送るため呼び出す\r\n        }\r\n        return outputs;\r\n    };\r\n    const midiAccessFailure = (err) => {\r\n        console.log(err);\r\n        if (sysEx) {\r\n            sysEx = false;\r\n            navigator.requestMIDIAccess({sysex: sysEx})\r\n                .then(midiAccessSuccess)\r\n                .catch(midiAccessFailure);\r\n        }\r\n    };\r\n    navigator.requestMIDIAccess({sysex: sysEx})\r\n        .then(midiAccessSuccess)\r\n        .catch(midiAccessFailure);\r\n    // 終了時に鳴らしている音を切る\r\n    window.addEventListener('unload', () => {\r\n        for (let t=0; t<16; t++) {\r\n            this.settings.WebMIDIPortOutput.send([0xB0+t, 120, 0]);\r\n            for (let i=0; i<128; i++) {\r\n                this.settings.WebMIDIPortOutput.send([0x80+t, i, 0]);\r\n            }\r\n        }\r\n    });\r\n}","import picoAudioConstructor from './init/constructor.js';\r\nimport init from './init/init.js';\r\n\r\nimport setData from './player/set-data.js';\r\nimport initStatus from './player/init-status.js';\r\nimport play from './player/play.js';\r\nimport stop from './player/stop.js';\r\n\r\nimport createBaseNote from './player/sound-source/create-base-note.js';\r\nimport createNote from './player/sound-source/create-note.js';\r\nimport createPercussionNote from './player/sound-source/create-percussion-note.js';\r\n\r\nimport stopAudioNode from './player/stop-manager/stop-audio-node.js';\r\nimport pushFunc from './player/stop-manager/push-func.js';\r\nimport clearFunc from './player/stop-manager/clear-func.js';\r\n\r\nimport getTime from './player/time/get-time.js';\r\nimport getTiming from './player/time/get-timing.js';\r\n\r\nimport parseSMF from './smf/parse-smf.js';\r\n\r\nimport startWebMIDI from './web-midi/start-web-midi.js';\r\n\r\nclass PicoAudio {\r\n    /**\r\n     * PicoAudioクラスのコンストラクタ\r\n     * @param {Object} argsObj \r\n     */\r\n    constructor(argsObj) {\r\n        picoAudioConstructor.call(this, argsObj);\r\n    }\r\n\r\n    /**\r\n     * 初期化・準備\r\n     * @param {Object} argsObj \r\n     */\r\n    init(argsObj) {\r\n        return init.call(this, argsObj);\r\n    }\r\n    \r\n    /**\r\n     * MIDIファイル(SMF)を解析する\r\n     * @param {Uint8Array} smf MIDIファイルの内容が入ったUint8Arrayオブジェクト\r\n     * @returns {Object} 再生用の情報が入ったオブジェクト\r\n     */\r\n    parseSMF(smf) {\r\n        return parseSMF.call(this, smf);\r\n    }\r\n\r\n    /**\r\n     * 再生用のデータをセットする\r\n     * @param {Object} data PicoAudio.parseSMF()で返されたオブジェクト\r\n     */\r\n    setData(data) {\r\n        return setData.call(this, data);\r\n    }\r\n\r\n    /**\r\n     * 再生\r\n     * @param {boolean} _isSongLooping PicoAudio内部で使う引数\r\n     */\r\n    play(_isSongLooping) {\r\n        return play.call(this, _isSongLooping);\r\n    }\r\n\r\n    /**\r\n     * 停止\r\n     * @param {boolean} _isSongLooping PicoAudio内部で使う引数\r\n     */\r\n    stop(_isSongLooping) {\r\n        return stop.call(this, _isSongLooping);\r\n    }\r\n\r\n    /**\r\n     * リセット\r\n     * @param {boolean} _isSongLooping PicoAudio内部で使う引数\r\n     * @param {boolean} _isLight PicoAudio内部で使う引数\r\n     */\r\n    initStatus(_isSongLooping, _isLight) {\r\n        return initStatus.call(this, _isSongLooping, _isLight);\r\n    }\r\n\r\n    setStartTime(offset) {\r\n        this.states.startTime -= offset;\r\n    }\r\n\r\n    // 時関関係 //\r\n    /**\r\n     * tickからtime(秒)を求める\r\n     * @param {number} tick\r\n     * @returns {number} time(秒)\r\n     */\r\n    getTime(tick) {\r\n        return getTime.call(this, tick);\r\n    }\r\n    /**\r\n     * time(秒)からtickを求める\r\n     * @param {number} time\r\n     * @returns {number} tick\r\n     */\r\n    getTiming(time) {\r\n        return getTiming.call(this, time);\r\n    }\r\n\r\n    // 再生・音源関係 //\r\n    /**\r\n     * 再生処理（Web Audio API の oscillator等で音を鳴らす）\r\n     * @param {Object} option \r\n     * @param {boolean} isDrum \r\n     * @param {boolean} isExpression \r\n     * @param {boolean} nonChannel \r\n     * @param {boolean} nonStop \r\n     * @returns {Object} AudioNodeやパラメータを返す\r\n     */\r\n    createBaseNote(option, isDrum, isExpression, nonChannel, nonStop) {\r\n        return createBaseNote.call(this, option, isDrum, isExpression, nonChannel, nonStop);\r\n    }\r\n    /**\r\n     * 音源（パーカッション以外）\r\n     * @param {Object} option \r\n     * @returns {Object} 音をストップさせる関数を返す\r\n     */\r\n    createNote(option) {\r\n        return createNote.call(this, option);\r\n    }\r\n    /**\r\n     * パーカッション音源\r\n     * @param {Object} option \r\n     * @returns {Object} 音をストップさせる関数を返す\r\n     */\r\n    createPercussionNote(option) {\r\n        return createPercussionNote.call(this, option);\r\n    }\r\n\r\n    // 停止管理関係 //\r\n    stopAudioNode(tar, time, stopGainNode, isNoiseCut) {\r\n        return stopAudioNode.call(this, tar, time, stopGainNode, isNoiseCut);\r\n    }\r\n    pushFunc(tar) {\r\n        return pushFunc.call(this, tar);\r\n    }\r\n    clearFunc(tar1, tar2) {\r\n        return clearFunc.call(this, tar1, tar2);\r\n    }\r\n\r\n    /**\r\n     * Web MIDI API\r\n     */\r\n    startWebMIDI() {\r\n        return startWebMIDI.call(this);\r\n    }\r\n\r\n    // インターフェース関係 //\r\n    addEventListener(type, func) {\r\n        // type = EventName (play, stop, noteOn, noteOff, songEnd)\r\n        this.events.push({type: type, func: func});\r\n    }\r\n    removeEventListener(type, func) {\r\n        for (let i = this.events.length; i >= 0; i--) {\r\n            if (event.type == type && event.func === func) {\r\n                this.events.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    removeAllEventListener(type) {\r\n        for (let i = this.events.length; i >= 0; i--) {\r\n            if (event.type == type) {\r\n                this.events.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    fireEvent(type, option) {\r\n        this.events.forEach((event) => {\r\n            if (event.type == type) {\r\n                try {\r\n                    event.func(option);\r\n                } catch(e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setOnSongEndListener(listener) { this.onSongEndListener = listener; }\r\n    onSongEnd() {\r\n        if (this.onSongEndListener) {\r\n            const isStopFunc = this.onSongEndListener();\r\n            if (isStopFunc) return;\r\n        }\r\n        if (this.settings.loop) {\r\n            this.initStatus(true);\r\n            if (this.settings.isCC111 && this.cc111Time != -1) {\r\n                this.setStartTime(this.cc111Time);\r\n            }\r\n            this.play(true);\r\n        }\r\n    }\r\n    gethannels() { return this.channels; }\r\n    setChannels(channels) {\r\n        channels.forEach((channel, idx) => {\r\n            this.channels[idx] = channel;\r\n        });\r\n    }\r\n    initChannels() {\r\n        for (let i=0; i<16; i++) {\r\n            this.channels[i] = [0,0,1];\r\n        }\r\n    }\r\n    getMasterVolume() { return this.settings.masterVolume; }\r\n    setMasterVolume(volume) {\r\n        this.settings.masterVolume = volume;\r\n        if (this.isStarted) {\r\n            this.masterGainNode.gain.value = this.settings.masterVolume;\r\n        }\r\n    } \r\n    isLoop() { return this.settings.loop; }\r\n    setLoop(loop) { this.settings.loop = loop; }\r\n    isWebMIDI() { return this.settings.isWebMIDI; }\r\n    setWebMIDI(enable) { this.settings.isWebMIDI = enable; }\r\n    isCC111() { return this.settings.isCC111; }\r\n    setCC111(enable) { this.settings.isCC111 = enable; } \r\n    isReverb() { return this.settings.isReverb; }\r\n    setReverb(enable) { this.settings.isReverb = enable; }\r\n    getReverbVolume() { return this.settings.reverbVolume; }\r\n    setReverbVolume(volume) { this.settings.reverbVolume = volume; }\r\n    isChorus() { return this.settings.isChorus; }\r\n    setChorus(enable) { this.settings.isChorus = enable; }\r\n    getChorusVolume() { return this.settings.chorusVolume; }\r\n    setChorusVolume(volume) { this.settings.chorusVolume = volume; }\r\n}\r\n\r\nexport default PicoAudio;"],"names":["picoAudioConstructor","argsObj","key","debug","isStarted","isPlayed","settings","masterVolume","generateVolume","tempo","basePitch","resolution","isWebMIDI","WebMIDIPortOutputs","WebMIDIPortOutput","WebMIDIPort","WebMIDIPortSysEx","isReverb","reverbVolume","initReverb","isChorus","chorusVolume","isCC111","loop","isSkipBeginning","isSkipEnding","holdOnValue","maxPoly","maxPercPoly","isOfflineRendering","isSameDrumSoundOverlap","rewriteVar","this","events","trigger","isNoteTrigger","play","stop","noteOn","noteOff","songEnd","states","isPlaying","startTime","stopTime","stopFuncs","webMIDIWaitState","webMIDIStopTime","playIndices","updateBufTime","updateBufMaxTime","updateIntervalTime","latencyLimitTime","hashedDataList","hashedMessageList","playData","channels","tempoTrack","timing","value","cc111Time","onSongEndListener","i","push","audioContext","init","dist","src","hensu","RandomUtil","x","y","z","w","resetSeed","t","r","Math","abs","InterpolationUtil","buffer","vtBufs","bufferSize","getChannelData","length","vtBufsSize","ch","data","vtBuf","ratio","idxF","idx1","trunc","idx2","idxR","picoAudio","AudioContext","window","webkitAudioContext","context","masterGainNode","createGain","gain","sampleRate","sampleRateVT","whitenoise","sampleLength","sampleLengthVT","Float32Array","random","createBuffer","lerpWave","impulseResponse","v","s","d","pow","convolver","createConvolver","normalize","convolverGainNode","connect","destination","chorusDelayNode","createDelay","chorusGainNode","chorusOscillator","createOscillator","chorusLfoGainNode","delayTime","frequency","start","Performance","_now","performance","Date","now","Number","setData","syoriTimeS","header","firstNoteOnTiming","lastNoteOffTiming","firstNoteOnTime","lastNoteOffTime","initStatus","syoriTimeE","console","log","isSongLooping","isLight","noteOnAry","noteOffAry","startWebMIDI","send","ArrayUtil","array","index","pop","shift","splice","Array","ParseUtil","arr","startIdx","endIdx","that","time","p","len","indices","indicesLength","indicesFoot","indicesCur","indicesHead","indicesPre","UpdateNote","currentTime","updatePreTime","pPreTime","cPreTime","pTimeSum","cTimeSum","cnt","initCurrentTime","updateNowTime","pTime","cTime","latencyTime","tempTime","notes","idx","note","curTime","_this","polyCnt","percCnt","forEach","tar","channel","stopFunc","createNote","createPercussionNote","pushFunc","checkNoteOn","checkNoteOff","messages","smfData","message","pLen","smfPtrLen","smfPtr","state","lengthAry","variableLengthToInt","sysExStartP","sysExEndP","webMIDIMes","Uint8Array","size","sendMes","e","tempNote","nowTime","fireEvent","drumStopTime","clearFunc","waitTime","setTimeout","reserveSongEnd","setStartTime","reserveSongEndTime","getTime","MAX_SAFE_INTEGER","reserveSongEndFunc","onSongEnd","rootTimeout","clearTimeout","reserve","setInterval","update","clearInterval","n","ary","createBaseNote","option","isDrum","isExpression","nonChannel","nonStop","songStartTime","velocity","isGainValueZero","expGainValue","expression","expGainNode","setValueAtTime","pitch","oscillator","createBufferSource","panNode","createStereoPanner","createPanner","pan","gainNode","stopGainNode","type","detune","pitchBend","modulationOscillator","modulationGainNode","panValue","posObj","convPosition","panningModel","setPosition","initPanValue","firstNode","positionX","firstPan","positionY","positionZ","reservePan","modulation","m","reverb","chorus","c","stopAudioNode","obj","panAngle","sin","PI","cos","note2","isPizzicato","isNoiseCut","instrument","linearRampToValueAtTime","decay","setTargetAtTime","playbackRate","source","gainNode2","stopGainNode2","nextSameNoteOnInterval","stopAudioTime","stopAudioTime2","f","t1","t2","t3","t4","t5","r1","r2","r3","r4","r5","r6","vol1Time","cancelScheduledValues","tar1","tar2","some","tick","imid","imin","imax","floor","tempTiming","baseTiming","tempoObj","getTiming","baseTime","parseHeader","info","smf","getInt","format","trackcount","timemanage","chSize","parseTrack","beatTrack","songLength","endPoint","tempoCurTick","tempoCurTime","lastState","dt","cashP","chIndicesInsert","parseEvent","cc111Tick","dataEntry","hold","rpnLsb","rpnMsb","nowNoteOnIdxAry","indIdx","nextNoteOnAry","nextIdx","mes0","holdBeforeStop","prevNote","vol","name","ccAry","i2","parseSMF","_smf","syoriTimeS1","call","syoriTimeS2","syoriTimeS3","navigator","requestMIDIAccess","sysEx","midiAccessSuccess","midiAccess","output","outputs","o","get","open","sysex","then","midiAccessFailure","err","addEventListener","_isSongLooping","_isLight","offset","func","event","listener","volume","enable"],"mappings":"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"}